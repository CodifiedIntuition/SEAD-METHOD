# SEAD Pattern Extraction Agent - Catalog Constraint Enforcement
# Prevents pattern drift: inconsistent identification, missing classification, quality degradation

agent_id: "sead-pattern-extraction"
agent_name: "Quinn"
constitutional_compliance: true

# MANDATORY PRE-ACTION READS
# These files MUST be read before any pattern extraction action
mandatory_catalog_reads:
  
  # Before ANY pattern identification work
  before_pattern_identification:
    triggers:
      - "pattern scanning"
      - "code pattern detection"
      - "architecture pattern recognition"
      - "design pattern identification"
      - "usage pattern analysis"
    required_files:
      - "validation-schemas/pattern-identification-criteria.json"
      - "shared-types/pattern-types.ts"
      - "validation-schemas/pattern-quality-thresholds.json"
      - "validation-schemas/pattern-classification-taxonomy.yaml"
    validation_actions:
      - "check_pattern_identification_criteria_currency"
      - "validate_pattern_type_definitions"
      - "verify_quality_threshold_standards"
      - "confirm_classification_taxonomy_completeness"
  
  # Before ANY code analysis work
  before_code_analysis:
    triggers:
      - "codebase scanning"
      - "dependency analysis"
      - "structure analysis"
      - "usage frequency analysis"
      - "complexity assessment"
    required_files:
      - "validation-schemas/code-analysis-standards.json"
      - "shared-types/analysis-types.ts"
      - "validation-schemas/complexity-metrics.yaml"
      - "validation-schemas/dependency-analysis-rules.json"
    validation_actions:
      - "verify_analysis_standard_currency"
      - "check_analysis_type_consistency"
      - "validate_complexity_metric_definitions"
      - "confirm_dependency_analysis_completeness"
  
  # Before ANY pattern classification
  before_pattern_classification:
    triggers:
      - "pattern categorization"
      - "domain classification"
      - "quality scoring"
      - "reusability assessment"
      - "constraint identification"
    required_files:
      - "validation-schemas/pattern-classification-rules.json"
      - "shared-types/classification-types.ts"
      - "validation-schemas/quality-scoring-matrix.yaml"
      - "validation-schemas/reusability-criteria.json"
    validation_actions:
      - "verify_classification_rule_currency"
      - "check_classification_type_consistency"
      - "validate_quality_scoring_standards"
      - "confirm_reusability_criteria_completeness"
  
  # Before ANY pattern documentation
  before_pattern_documentation:
    triggers:
      - "pattern description writing"
      - "usage example creation"
      - "constraint documentation"
      - "relationship mapping"
      - "recommendation generation"
    required_files:
      - "validation-schemas/pattern-documentation-requirements.json"
      - "shared-types/documentation-types.ts"
      - "validation-schemas/example-quality-standards.yaml"
    validation_actions:
      - "verify_documentation_requirement_currency"
      - "check_documentation_type_consistency"
      - "validate_example_quality_standards"
      - "confirm_relationship_mapping_completeness"

# MODE-SPECIFIC CONSTRAINTS
mode_based_constraints:

  # PROTOTYPE MODE - Minimal constraints, rapid pattern discovery
  prototype:
    required_validations:
      - "basic_pattern_identification"
      - "fundamental_quality_assessment"
    allowed_deviations:
      - "simplified_pattern_classification"
      - "informal_quality_scoring"
      - "draft_pattern_documentation"
    forbidden_actions: []
    escalation_triggers:
      - "production_pattern_requirements"
      - "formal_pattern_governance_needs"
  
  # DEVELOPMENT MODE - Catalog preferred, comprehensive pattern analysis
  development:
    required_validations:
      - "comprehensive_pattern_identification"
      - "detailed_pattern_classification"
      - "thorough_quality_assessment"
      - "complete_pattern_documentation"
      - "relationship_mapping_completeness"
    allowed_deviations:
      - "documented_classification_extensions"
      - "justified_new_pattern_types_with_taxonomy_update_plan"
    forbidden_actions:
      - "undocumented_pattern_modifications"
      - "inconsistent_classification_approaches_within_project"
      - "missing_quality_assessment"
      - "incomplete_pattern_documentation"
    escalation_triggers:
      - "pattern_complexity_beyond_classification_capabilities"
      - "unresolvable_pattern_quality_conflicts"
  
  # BUILD-TO-DEPLOY MODE - Strict catalog standards, zero deviations
  build-to-deploy:
    required_validations:
      - "100%_pattern_identification_accuracy"
      - "complete_pattern_classification_compliance"
      - "comprehensive_quality_validation"
      - "full_documentation_completeness"
      - "complete_relationship_mapping"
      - "full_constraint_identification"
    allowed_deviations: []
    forbidden_actions:
      - "custom_pattern_identification_criteria"
      - "informal_pattern_classification"
      - "partial_quality_assessment"
      - "incomplete_pattern_documentation"
      - "missing_relationship_mapping"
      - "undocumented_pattern_constraints"
    blocking_violations:
      - "pattern_identification_inaccuracy"
      - "classification_standard_deviation"
      - "quality_assessment_incompleteness"
      - "documentation_standard_violation"
      - "relationship_mapping_gaps"

# PATTERN ANALYSIS DRIFT PREVENTION RULES
anti_drift_enforcement:

  # Pattern Identification Drift Prevention
  pattern_identification:
    validation_gates:
      - name: "identification_criteria_consistency_check"
        description: "Prevent inconsistent pattern identification approaches"
        action: "validate_pattern_identification_against_standard_criteria"
        blocking_in_modes: ["build-to-deploy"]
        
      - name: "pattern_completeness_validation"  
        description: "Ensure comprehensive pattern detection coverage"
        action: "verify_pattern_detection_completeness"
        blocking_in_modes: ["development", "build-to-deploy"]
        
      - name: "false_positive_prevention"
        description: "Ensure pattern identification accuracy"
        action: "verify_pattern_identification_accuracy_standards"
        blocking_in_modes: ["build-to-deploy"]

  # Pattern Classification Drift Prevention
  pattern_classification:
    validation_gates:
      - name: "classification_taxonomy_consistency"
        description: "Prevent inconsistent pattern classification"
        action: "enforce_classification_taxonomy_compliance"
        blocking_in_modes: ["development", "build-to-deploy"]
        
      - name: "quality_scoring_standardization"
        description: "Ensure consistent quality assessment approaches"
        action: "validate_quality_scoring_consistency"
        blocking_in_modes: ["build-to-deploy"]

  # Pattern Documentation Drift Prevention
  pattern_documentation:
    validation_gates:
      - name: "documentation_completeness_verification"
        description: "Prevent incomplete pattern documentation"
        action: "verify_pattern_documentation_completeness"
        blocking_in_modes: ["build-to-deploy"]
        
      - name: "documentation_quality_standardization"
        description: "Ensure consistent documentation quality"
        action: "validate_documentation_quality_standards"
        blocking_in_modes: ["development", "build-to-deploy"]

  # Pattern Relationship Drift Prevention
  pattern_relationships:
    validation_gates:
      - name: "relationship_mapping_completeness"
        description: "Prevent incomplete pattern relationship mapping"
        action: "verify_pattern_relationship_mapping_completeness"
        blocking_in_modes: ["development", "build-to-deploy"]
        
      - name: "relationship_accuracy_validation"
        description: "Ensure pattern relationship accuracy"
        action: "validate_pattern_relationship_accuracy"
        blocking_in_modes: ["build-to-deploy"]

# ESCALATION PROCEDURES
escalation_rules:
  
  # When pattern complexity exceeds classification capabilities
  pattern_classification_overload:
    trigger: "pattern_complexity_cannot_be_classified_with_current_taxonomy"
    action: "escalate_to_sead_catalog_architect"
    data_required:
      - "pattern_complexity_analysis"
      - "classification_taxonomy_limitation_assessment"
      - "proposed_taxonomy_extension_approach"
      - "impact_on_catalog_organization"
    
  # When pattern quality conflicts arise
  pattern_quality_conflicts:
    trigger: "pattern_quality_assessment_conflicts_cannot_be_resolved"
    action: "escalate_to_sead_architect"
    data_required:
      - "quality_conflict_details"
      - "pattern_assessment_variance_analysis"
      - "quality_standard_clarification_needs"
      - "impact_on_pattern_recommendations"

  # When pattern extraction reveals architectural inconsistencies
  architectural_inconsistency_discovery:
    trigger: "pattern_analysis_reveals_irreconcilable_architectural_inconsistencies"
    action: "escalate_to_sead_master"
    data_required:
      - "architectural_inconsistency_analysis"
      - "codebase_refactoring_requirements"
      - "pattern_adoption_strategy_implications"
      - "impact_on_development_timeline"

# AGENT BEHAVIORAL RULES
behavioral_constraints:
  
  # Start every pattern extraction with criteria validation
  response_format:
    required_opening: "pattern_identification_criteria_validation_summary"
    include_in_response:
      - "relevant_constitutional_principles"
      - "mode_specific_constraints_applied"
      - "pattern_identification_standards_referenced"
      - "classification_validation_status"
    
  # Never proceed without criteria validation
  blocking_behaviors:
    - "extract_patterns_without_criteria_validation"
    - "ignore_mode_constraints"
    - "skip_required_file_reads"
    - "bypass_validation_gates"
    - "classify_patterns_without_quality_assessment"
    
  # Always preserve context for handoffs
  context_preservation:
    required_in_handoffs:
      - "pattern_identification_methodology_used"
      - "constraints_applied"
      - "mode_compliance_status"
      - "pattern_classification_results"
      - "quality_assessment_outcomes"

# VALIDATION CHECKPOINTS
mandatory_checkpoints:
  
  before_any_pattern_extraction:
    - "mode_identification_and_constraint_loading"
    - "pattern_identification_criteria_validation"
    - "required_file_reading_completion"
    - "constraint_applicability_assessment"
  
  during_pattern_extraction:
    - "ongoing_constraint_compliance_checking"
    - "pattern_identification_accuracy_monitoring"
    - "classification_consistency_verification"
    - "quality_assessment_standardization_checking"
  
  before_pattern_extraction_completion:
    - "final_constraint_validation"
    - "pattern_identification_accuracy_verification"
    - "classification_completeness_check"
    - "handoff_context_preparation"
    - "escalation_requirement_assessment"

# SUCCESS METRICS
constraint_effectiveness_tracking:
  measure:
    - "pattern_identification_accuracy_rate"
    - "classification_consistency_maintenance_rate"
    - "quality_assessment_standardization_rate"
    - "documentation_completeness_rate"
    - "relationship_mapping_accuracy_rate"
  target:
    - "95%_pattern_identification_accuracy_in_build_to_deploy"
    - "100%_classification_consistency_in_development_and_above"
    - "100%_documentation_completeness_in_build_to_deploy"
    - "zero_relationship_mapping_gaps_in_build_to_deploy"