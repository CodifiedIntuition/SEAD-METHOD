# SEAD-Enhanced Specification Template
# Combines Spec-Kit proven structure with SEAD catalog integration and constitutional framework

template_info:
  name: "SEAD Spec-Kit Specification Template"
  version: "1.0"
  source: "Adapted from spec-kit/templates/spec-template.md"
  purpose: "Constitutional specification creation with catalog integration"
  
sead_config:
  template_type: "specification"
  mode_support: ["prototype", "development", "build-to-deploy"]
  catalog_integration: true
  constitutional_compliance: true
  agent_coordination: true

content: |
  # Feature Specification: [FEATURE NAME]
  
  **Feature Branch**: `{{BRANCH_NAME}}`  
  **Created**: {{CREATION_DATE}}  
  **Status**: Draft  
  **SEAD Mode**: {{SEAD_MODE}}
  **Input**: User description: "{{FEATURE_DESCRIPTION}}"
  
  ## Execution Flow (main)
  ```
  1. Parse user description from Input
     ‚Üí If empty: ERROR "No feature description provided"
  2. Extract key concepts from description
     ‚Üí Identify: actors, actions, data, constraints
     ‚Üí SEAD Enhancement: Map concepts to catalog domains
  3. For each unclear aspect:
     ‚Üí Mark with [NEEDS CLARIFICATION: specific question]
     ‚Üí SEAD Enhancement: Check catalog patterns for resolution
  4. Fill User Scenarios & Testing section
     ‚Üí If no clear user flow: ERROR "Cannot determine user scenarios"  
     ‚Üí SEAD Enhancement: Reference catalog test patterns
  5. Generate Functional Requirements
     ‚Üí Each requirement must be testable
     ‚Üí Mark ambiguous requirements
     ‚Üí SEAD Enhancement: Include catalog pattern requirements
  6. Identify Key Entities (if data involved)
     ‚Üí SEAD Enhancement: Reference catalog shared types
  7. Run Review Checklist (enhanced with SEAD criteria)
     ‚Üí If any [NEEDS CLARIFICATION]: WARN "Spec has uncertainties"
     ‚Üí If implementation details found: ERROR "Remove tech details"
     ‚Üí SEAD Enhancement: Validate catalog integration
     ‚Üí SEAD Enhancement: Check constitutional compliance
  8. Return: SUCCESS (spec ready for planning)
  ```
  
  ---
  
  ## ‚ö° Quick Guidelines
  - ‚úÖ Focus on WHAT users need and WHY
  - ‚ùå Avoid HOW to implement (no tech stack, APIs, code structure)
  - üë• Written for business stakeholders, not developers
  - üèóÔ∏è **SEAD**: Identify catalog pattern opportunities
  - üìã **SEAD**: Maintain constitutional compliance for {{SEAD_MODE}} mode
  
  ### Section Requirements
  - **Mandatory sections**: Must be completed for every feature
  - **Optional sections**: Include only when relevant to the feature
  - **SEAD sections**: Required for catalog integration and constitutional compliance
  - When a section doesn't apply, remove it entirely (don't leave as "N/A")
  
  ### For AI Generation
  When creating this spec from a user prompt:
  1. **Mark all ambiguities**: Use [NEEDS CLARIFICATION: specific question] for any assumption you'd need to make
  2. **Don't guess**: If the prompt doesn't specify something (e.g., "login system" without auth method), mark it
  3. **Think like a tester**: Every vague requirement should fail the "testable and unambiguous" checklist item
  4. **SEAD Enhancement**: Check catalog patterns before marking as unclear
  5. **SEAD Enhancement**: Consider constitutional constraints for current mode
  6. **Common underspecified areas**:
     - User types and permissions ‚Üí Check catalog auth patterns
     - Data retention/deletion policies ‚Üí Check catalog data strategy
     - Performance targets and scale ‚Üí Check catalog integration patterns
     - Error handling behaviors ‚Üí Check catalog error handling patterns
     - Integration requirements ‚Üí Check catalog integration patterns
     - Security/compliance needs ‚Üí Check constitutional requirements
  
  ---
  
  ## User Scenarios & Testing *(mandatory)*
  
  ### Primary User Story
  [Describe the main user journey in plain language]
  
  ### Acceptance Scenarios
  1. **Given** [initial state], **When** [action], **Then** [expected outcome]
  2. **Given** [initial state], **When** [action], **Then** [expected outcome]
  
  ### Edge Cases
  - What happens when [boundary condition]?
  - How does system handle [error scenario]?
  
  **SEAD Enhancement**: Test scenarios should reference catalog test patterns where applicable:
  {{#if CATALOG_TEST_PATTERNS}}
  - **Catalog Test Patterns**: {{CATALOG_TEST_PATTERNS}}
  {{/if}}
  
  ## Requirements *(mandatory)*
  
  ### Functional Requirements
  - **FR-001**: System MUST [specific capability, e.g., "allow users to create accounts"]
  - **FR-002**: System MUST [specific capability, e.g., "validate email addresses"]  
  - **FR-003**: Users MUST be able to [key interaction, e.g., "reset their password"]
  - **FR-004**: System MUST [data requirement, e.g., "persist user preferences"]
  - **FR-005**: System MUST [behavior, e.g., "log all security events"]
  
  *Example of marking unclear requirements:*
  - **FR-006**: System MUST authenticate users via [NEEDS CLARIFICATION: auth method not specified - email/password, SSO, OAuth? Check catalog auth patterns]
  - **FR-007**: System MUST retain user data for [NEEDS CLARIFICATION: retention period not specified - check catalog data strategy]
  
  ### Key Entities *(include if feature involves data)*
  - **[Entity 1]**: [What it represents, key attributes without implementation]
  - **[Entity 2]**: [What it represents, relationships to other entities]
  
  **SEAD Enhancement**: Reference catalog shared types where applicable:
  {{#if CATALOG_SHARED_TYPES}}
  - **Catalog Shared Types**: {{CATALOG_SHARED_TYPES}}
  {{/if}}
  
  ---
  
  ## SEAD Integration *(mandatory for SEAD projects)*
  
  ### Catalog Pattern Integration
  **Mode**: {{SEAD_MODE}} - {{MODE_DESCRIPTION}}
  
  #### Required Catalog Patterns
  {{#each REQUIRED_CATALOG_PATTERNS}}
  - **{{domain}}**: {{usage_description}}
    - Available: {{#if available}}‚úÖ{{else}}‚ùå (needs creation/extension){{/if}}
    - Usage: {{usage_plan}}
  {{/each}}
  
  #### Catalog Pattern Gaps
  {{#if CATALOG_PATTERN_GAPS}}
  - **Patterns to Create**: {{PATTERNS_TO_CREATE}}
  - **Patterns to Extend**: {{PATTERNS_TO_EXTEND}}
  - **Pattern Documentation Required**: {{PATTERN_DOCUMENTATION_REQUIRED}}
  {{else}}
  - ‚úÖ All required patterns available in catalog
  {{/if}}
  
  ### Constitutional Compliance Framework
  **Current Mode Constraints**: {{SEAD_MODE}}
  
  #### {{SEAD_MODE}} Mode Requirements
  {{#if (eq SEAD_MODE "prototype")}}
  - **Pattern Usage**: Optional, experimentation encouraged
  - **Validation**: Basic validation, learning-focused
  - **Documentation**: Pattern learnings capture required
  {{/if}}
  {{#if (eq SEAD_MODE "development")}}
  - **Pattern Usage**: Preferred, extensions acceptable with documentation
  - **Validation**: Standard validation checkpoints required
  - **Documentation**: Pattern usage and extensions documented
  {{/if}}
  {{#if (eq SEAD_MODE "build-to-deploy")}}
  - **Pattern Usage**: Mandatory, strict compliance required
  - **Validation**: Comprehensive validation gates required
  - **Documentation**: Complete pattern compliance documentation
  {{/if}}
  
  #### Quality Gates for {{SEAD_MODE}} Mode
  - [ ] Catalog pattern compliance validated
  - [ ] Constitutional constraints satisfied
  - [ ] Mode-appropriate quality standards met
  - [ ] Agent handoff context prepared
  
  ### Context Preservation Package
  
  #### For Planning Agent Handoff
  - **Catalog Pattern Requirements**: [List of patterns identified for implementation]
  - **Mode Constraint Summary**: [Key constraints for architectural decisions]  
  - **Constitutional Compliance Requirements**: [Validation requirements]
  - **Feature-to-Technical Mapping**: [Requirements mapped to implementation needs]
  
  #### For QA Agent Validation
  - **Catalog Compliance Criteria**: [Pattern usage validation requirements]
  - **Constitutional Validation Points**: [Mode-specific checkpoints]
  - **Integration Test Requirements**: [Test scenarios with catalog patterns]
  - **User Experience Validation**: [Consistency with design system patterns]
  
  ---
  
  ## Review & Acceptance Checklist
  *GATE: Automated checks run during main() execution*
  
  ### Content Quality (Spec-Kit Standards)
  - [ ] No implementation details (languages, frameworks, APIs)
  - [ ] Focused on user value and business needs
  - [ ] Written for non-technical stakeholders
  - [ ] All mandatory sections completed
  
  ### Requirement Completeness (Enhanced)
  - [ ] No [NEEDS CLARIFICATION] markers remain
  - [ ] Requirements are testable and unambiguous  
  - [ ] Success criteria are measurable
  - [ ] Scope is clearly bounded
  - [ ] Dependencies and assumptions identified
  
  ### SEAD Integration Quality
  - [ ] {{SEAD_MODE}} mode constraints appropriately applied
  - [ ] Catalog pattern integration strategy defined
  - [ ] Constitutional compliance requirements specified
  - [ ] Context preservation data complete for agent handoffs
  - [ ] Quality gates configured appropriately for mode
  
  ---
  
  ## Execution Status
  *Updated by main() during processing*
  
  ### Spec-Kit Execution Status
  - [ ] User description parsed
  - [ ] Key concepts extracted
  - [ ] Ambiguities marked
  - [ ] User scenarios defined
  - [ ] Requirements generated
  - [ ] Entities identified
  - [ ] Review checklist passed
  
  ### SEAD Integration Status  
  - [ ] SEAD mode configuration completed
  - [ ] Catalog pattern analysis completed
  - [ ] Constitutional compliance framework applied
  - [ ] Context preservation package prepared
  - [ ] Agent handoff context configured
  
  ---
  
  ## Artifact Relationships *(SEAD Enhancement)*
  - **Specification ID**: spec-{{SANITIZED_FEATURE_NAME}}-{{TIMESTAMP}}
  - **Branch**: {{BRANCH_NAME}}
  - **SEAD Mode**: {{SEAD_MODE}}
  - **Next Artifact**: Implementation Plan (planning phase)
  - **Agent Handoff**: Ready for Planning Agent with catalog and constitutional context
  
  ---

# Template processing instructions for SEAD agents
processing_instructions:
  - Replace all {{VARIABLE}} placeholders with actual values
  - Process conditional blocks based on catalog availability
  - Integrate catalog pattern information from catalog analysis
  - Apply mode-specific content based on SEAD_MODE value
  - Preserve Spec-Kit execution flow logic
  - Maintain constitutional compliance requirements