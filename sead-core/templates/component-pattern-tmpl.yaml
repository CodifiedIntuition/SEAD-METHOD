# SEAD Component Pattern Documentation Template
template:
  id: component-pattern-template-v1
  name: SEAD Component Pattern Documentation Template
  version: 1.0
  constitutional_framework: true
  catalog_integration: true
  pattern_domain: ui_components
  output:
    format: markdown
    filename: "{{pattern_name}}-component-pattern.md"
    title: "{{pattern_name}} Component Pattern Documentation"

constitutional_requirements:
  mode_detection: required
  catalog_read: mandatory
  context_preservation: enforced
  quality_validation: continuous
  anti_pattern_detection: enabled

workflow:
  mode: constitutional_interactive
  elicitation: guided_extraction
  catalog_validation: enabled
  constraint_enforcement: progressive

sections:
  - id: constitutional-initialization
    title: Constitutional Framework Initialization
    instruction: |
      Establish constitutional context for UI component pattern documentation:
      1. Identify development mode and component design quality requirements
      2. Load constitutional framework for component governance
      3. Configure catalog integration validation requirements
      4. Establish context preservation for component pattern handoffs
      5. Set quality gates appropriate for component pattern tier
    sections:
      - id: pattern-context
        title: Component Pattern Context and Constitutional Framework
        template: |
          **Documentation Date:** {{documentation_date}}
          **Development Mode:** {{development_mode}}
          **Constitutional Framework:** {{constitutional_version}}
          **Pattern Agent:** sead-pattern-extraction
          **Component Quality Tier:** {{pattern_quality_tier}}
          **Catalog Domain:** UI Components > {{component_subdomain}}
          **Constitutional Compliance:** {{constitutional_compliance_level}}

  - id: component-pattern-overview
    title: Component Pattern Overview
    instruction: |
      Provide comprehensive component pattern overview focusing on UI design and user interaction:
      1. Define component pattern purpose and user interface problem it solves
      2. Establish component scope, boundaries, and design responsibilities
      3. Document when to use this component pattern and when NOT to use
      4. Identify target users and component integration prerequisites
      5. Provide value proposition and user experience benefits
    elicit: true
    constitutional_validation: required
    sections:
      - id: component-pattern-summary
        title: Component Pattern Summary
        template: |
          **Component Pattern Name:** {{pattern_name}}
          **Component Domain:** {{component_subdomain}}
          **Quality Tier:** {{quality_tier}}
          **Component Complexity Level:** {{complexity_level}}
          **Design System Scope:** {{design_system_scope}}
          
          **Component Purpose:**
          {{component_purpose}}
          
          **UI Problem Solved:**
          {{ui_problem_description}}
          
          **Key Component Benefits:**
          {{#each component_benefits}}
          - {{benefit_description}}
          {{/each}}

      - id: component-usage-guidance
        title: Component Usage Guidance
        template: |
          **When to Use This Component Pattern:**
          {{#each component_use_cases}}
          - {{use_case_description}}
          {{/each}}
          
          **When NOT to Use This Component Pattern:**
          {{#each component_anti_use_cases}}
          - {{anti_use_case_description}}
          {{/each}}
          
          **Component Integration Prerequisites:**
          {{#each component_prerequisites}}
          - {{prerequisite_description}}
          {{/each}}
          
          **Target Users and Developers:**
          - **User Types:** {{target_user_types}}
          - **Developer Skill Level:** {{target_developer_skill}}
          - **Design System Knowledge:** {{design_system_knowledge_required}}

  - id: component-interface-design
    title: Component Interface and Props Design
    instruction: |
      Document comprehensive component interface and props design:
      1. Define component props, their types, and validation requirements
      2. Document component state management and lifecycle behavior
      3. Specify event handling and callback patterns
      4. Include styling and theming integration approaches
      5. Address accessibility and responsive design considerations
    elicit: true
    constitutional_validation: critical
    sections:
      - id: props-interface
        title: Props Interface and Types
        template: |
          **Component Framework:** {{component_framework}}
          **Type System:** {{type_system}}
          
          **Required Props:**
          {{#each required_props}}
          - **{{prop_name}}** ({{prop_type}}): {{prop_description}}
            - **Validation:** {{prop_validation}}
            - **Example:** {{prop_example}}
          {{/each}}
          
          **Optional Props:**
          {{#each optional_props}}
          - **{{prop_name}}** ({{prop_type}}): {{prop_description}}
            - **Default:** {{prop_default}}
            - **Example:** {{prop_example}}
          {{/each}}
          
          **Props Interface Example:**
          ```{{type_language}}
          {{props_interface_example}}
          ```

      - id: component-state-lifecycle
        title: Component State and Lifecycle
        template: |
          **State Management Approach:** {{state_management_approach}}
          
          **Internal State:**
          {{#each internal_state}}
          - **{{state_name}}** ({{state_type}}): {{state_description}}
            - **Initial Value:** {{state_initial}}
            - **Update Triggers:** {{state_triggers}}
          {{/each}}
          
          **Lifecycle Hooks Used:**
          {{#each lifecycle_hooks}}
          - **{{hook_name}}:** {{hook_purpose}}
          {{/each}}
          
          **State Management Example:**
          ```{{component_language}}
          {{state_management_example}}
          ```

      - id: event-handling
        title: Event Handling and Callbacks
        template: |
          **Event Handling Pattern:** {{event_handling_pattern}}
          
          **Component Events:**
          {{#each component_events}}
          - **{{event_name}}:** {{event_description}}
            - **Trigger:** {{event_trigger}}
            - **Payload:** {{event_payload}}
            - **Example:** {{event_example}}
          {{/each}}
          
          **Event Handler Example:**
          ```{{component_language}}
          {{event_handler_example}}
          ```

      - id: styling-theming
        title: Styling and Theming Integration
        template: |
          **Styling Approach:** {{styling_approach}}
          **Theme Integration:** {{theme_integration}}
          
          **CSS Classes Structure:**
          ```css
          {{css_classes_example}}
          ```
          
          **Theme Variables:**
          {{#each theme_variables}}
          - **{{variable_name}}:** {{variable_description}}
            - **Default:** {{variable_default}}
            - **CSS Property:** {{css_property}}
          {{/each}}
          
          **Theming Example:**
          ```{{styling_language}}
          {{theming_example}}
          ```

  - id: component-implementation
    title: Component Implementation Guide
    instruction: |
      Provide comprehensive component implementation guidance with working examples:
      1. Document step-by-step component implementation process
      2. Provide complete working component examples
      3. Include testing approaches and component validation
      4. Address performance optimization techniques
      5. Include accessibility implementation details
    elicit: true
    constitutional_validation: critical
    sections:
      - id: basic-implementation
        title: Basic Component Implementation
        template: |
          **Implementation Framework:** {{component_framework}}
          **Language:** {{component_language}}
          
          **Basic Component Example:**
          ```{{component_language}}
          {{basic_component_example}}
          ```
          
          **Component Usage Example:**
          ```{{component_language}}
          {{component_usage_example}}
          ```

      - id: advanced-implementation
        title: Advanced Features and Customization
        template: |
          **Advanced Features:**
          {{#each advanced_features}}
          - **{{feature_name}}:** {{feature_description}}
          {{/each}}
          
          **Advanced Component Example:**
          ```{{component_language}}
          {{advanced_component_example}}
          ```
          
          **Customization Options:**
          {{#each customization_options}}
          - **{{option_name}}:** {{option_description}}
            - **Type:** {{option_type}}
            - **Impact:** {{option_impact}}
          {{/each}}

      - id: composition-patterns
        title: Component Composition and Patterns
        template: |
          **Composition Strategy:** {{composition_strategy}}
          
          **Compound Component Pattern:**
          ```{{component_language}}
          {{compound_component_example}}
          ```
          
          **Render Props Pattern:**
          ```{{component_language}}
          {{render_props_example}}
          ```
          
          **Higher-Order Component Pattern:**
          ```{{component_language}}
          {{hoc_pattern_example}}
          ```

  - id: accessibility-responsive-design
    title: Accessibility and Responsive Design
    instruction: |
      Document comprehensive accessibility and responsive design implementation:
      1. Define ARIA attributes and semantic HTML requirements
      2. Document keyboard navigation and focus management
      3. Include screen reader support and assistive technology
      4. Address responsive breakpoints and mobile considerations
      5. Include color contrast and visual accessibility requirements
    elicit: true
    constitutional_validation: required
    sections:
      - id: accessibility-implementation
        title: Accessibility Implementation
        template: |
          **WCAG Compliance Level:** {{wcag_compliance_level}}
          **Accessibility Features:**
          {{#each accessibility_features}}
          - {{feature_description}}
          {{/each}}
          
          **ARIA Attributes:**
          {{#each aria_attributes}}
          - **{{aria_attribute}}:** {{aria_purpose}}
          {{/each}}
          
          **Accessibility Example:**
          ```{{component_language}}
          {{accessibility_implementation_example}}
          ```
          
          **Keyboard Navigation:**
          {{#each keyboard_interactions}}
          - **{{key_combination}}:** {{interaction_description}}
          {{/each}}

      - id: responsive-design
        title: Responsive Design Implementation
        template: |
          **Responsive Strategy:** {{responsive_strategy}}
          
          **Breakpoints:**
          {{#each breakpoints}}
          - **{{breakpoint_name}}:** {{breakpoint_value}} - {{breakpoint_behavior}}
          {{/each}}
          
          **Responsive CSS Example:**
          ```css
          {{responsive_css_example}}
          ```
          
          **Mobile Considerations:**
          {{#each mobile_considerations}}
          - {{consideration_description}}
          {{/each}}

  - id: component-testing-validation
    title: Component Testing and Validation
    instruction: |
      Document comprehensive component testing and validation approaches:
      1. Define component testing strategies and test categories
      2. Provide unit testing examples for component behavior
      3. Include integration testing with other components
      4. Address visual regression and snapshot testing
      5. Include accessibility and usability testing approaches
    elicit: true
    constitutional_validation: required
    sections:
      - id: component-testing-strategy
        title: Component Testing Strategy
        template: |
          **Testing Framework:** {{testing_framework}}
          **Testing Approach:** {{testing_approach}}
          
          **Test Categories:**
          {{#each test_categories}}
          - **{{category_name}}:** {{category_description}}
            - **Coverage:** {{category_coverage}}
            - **Tools:** {{category_tools}}
          {{/each}}

      - id: unit-testing
        title: Unit Testing Examples
        template: |
          **Unit Test Example:**
          ```{{test_language}}
          {{unit_test_example}}
          ```
          
          **Props Testing:**
          ```{{test_language}}
          {{props_test_example}}
          ```
          
          **Event Testing:**
          ```{{test_language}}
          {{event_test_example}}
          ```

      - id: integration-visual-testing
        title: Integration and Visual Testing
        template: |
          **Integration Test Example:**
          ```{{test_language}}
          {{integration_test_example}}
          ```
          
          **Visual Regression Testing:**
          ```{{test_language}}
          {{visual_regression_test_example}}
          ```
          
          **Accessibility Testing:**
          ```{{test_language}}
          {{accessibility_test_example}}
          ```

  - id: component-performance-optimization
    title: Component Performance Optimization
    instruction: |
      Document component performance optimization techniques and best practices:
      1. Address rendering performance and re-render optimization
      2. Include memory management and cleanup approaches
      3. Document lazy loading and code splitting strategies
      4. Address bundle size optimization techniques
      5. Include performance monitoring and measurement
    elicit: true
    constitutional_validation: required
    sections:
      - id: rendering-performance
        title: Rendering Performance Optimization
        template: |
          **Performance Characteristics:**
          - **Render Time:** {{typical_render_time}}
          - **Re-render Frequency:** {{rerender_frequency}}
          - **Memory Usage:** {{memory_usage}}
          
          **Optimization Techniques:**
          {{#each optimization_techniques}}
          - **{{technique_name}}:** {{technique_description}}
          ```{{component_language}}
          {{technique_example}}
          ```
          {{/each}}

      - id: bundle-optimization
        title: Bundle Size and Loading Optimization
        template: |
          **Bundle Impact:**
          - **Component Size:** {{component_bundle_size}}
          - **Dependencies:** {{dependency_bundle_size}}
          - **Total Impact:** {{total_bundle_impact}}
          
          **Lazy Loading Implementation:**
          ```{{component_language}}
          {{lazy_loading_example}}
          ```
          
          **Code Splitting:**
          ```{{component_language}}
          {{code_splitting_example}}
          ```

  - id: design-system-integration
    title: Design System Integration
    instruction: |
      Document integration with design systems and component libraries:
      1. Define design token usage and theme integration
      2. Document component library organization and packaging
      3. Include version management and update strategies
      4. Address documentation and style guide integration
      5. Include team collaboration and contribution workflows
    elicit: true
    constitutional_validation: required
    sections:
      - id: design-tokens-integration
        title: Design Tokens and Theme Integration
        template: |
          **Design Token Usage:**
          {{#each design_tokens}}
          - **{{token_name}}:** {{token_purpose}}
            - **Value:** {{token_value}}
            - **CSS Custom Property:** {{css_custom_property}}
          {{/each}}
          
          **Theme Integration Example:**
          ```{{styling_language}}
          {{theme_integration_example}}
          ```

      - id: component-library-organization
        title: Component Library Organization
        template: |
          **Library Structure:**
          {{component_library_structure}}
          
          **Export Strategy:**
          ```{{component_language}}
          {{export_strategy_example}}
          ```
          
          **Package Configuration:**
          ```json
          {{package_config_example}}
          ```
          
          **Documentation Integration:**
          - **Style Guide:** {{style_guide_integration}}
          - **Storybook:** {{storybook_integration}}
          - **Design Specs:** {{design_specs_integration}}

  - id: constitutional-compliance
    title: Constitutional Framework Compliance
    instruction: |
      Document SEAD constitutional framework compliance for component patterns:
      1. Detail constitutional requirements for component design and governance
      2. Document mode-aware behavior for different development phases
      3. Provide context preservation capabilities for component pattern handoffs
      4. Address audit trail and governance requirements for component evolution
      5. Include compliance validation and monitoring for component patterns
    constitutional_validation: mandatory
    sections:
      - id: constitutional-integration
        title: Constitutional Framework Integration
        template: |
          **Framework Compliance:**
          - **Framework Version:** {{constitutional_framework_version}}
          - **Component Compliance Level:** {{component_compliance_level}}
          - **Integration Date:** {{integration_date}}
          - **Validation Status:** {{validation_status}}
          
          **Mode-Aware Component Behavior:**
          - **Prototype Mode:** {{prototype_mode_component_behavior}}
          - **Development Mode:** {{development_mode_component_behavior}}
          - **Build-to-Deploy Mode:** {{build_deploy_mode_component_behavior}}
          
          **Component Constraint Enforcement:**
          {{#each component_constraints}}
          - **{{constraint_name}}:** {{constraint_description}}
            - **Enforcement Level:** {{enforcement_level}}
            - **Validation:** {{validation_approach}}
          {{/each}}

      - id: component-context-preservation
        title: Context Preservation and Agent Handoffs
        template: |
          **Component Context Preservation:**
          - **State Serialization:** {{component_state_serialization_approach}}
          - **Context Metadata:** {{component_context_metadata_description}}
          - **Handoff Support:** {{component_handoff_support_level}}
          
          **Component Agent Handoff Requirements:**
          {{#each component_handoff_requirements}}
          - {{requirement_description}}
          {{/each}}
          
          **Component Context Validation:**
          ```{{validation_language}}
          {{component_context_validation_code}}
          ```

      - id: component-governance-integration
        title: Governance and Audit Integration
        template: |
          **Component Governance Framework:**
          - **Governance Level:** {{component_governance_level}}
          - **Approval Process:** {{component_approval_process}}
          - **Review Requirements:** {{component_review_requirements}}
          
          **Component Audit Trail:**
          - **Audit Events:** {{component_audit_events}}
          - **Log Format:** {{component_audit_log_format}}
          - **Retention Policy:** {{component_audit_retention_policy}}
          
          **Component Compliance Monitoring:**
          {{#each component_monitoring_mechanisms}}
          - **{{mechanism_name}}:** {{mechanism_description}}
          {{/each}}