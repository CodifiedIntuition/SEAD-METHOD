# SEAD Error Handling Pattern Documentation Template
template:
  id: error-pattern-template-v1
  name: SEAD Error Handling Pattern Documentation Template
  version: 1.0
  constitutional_framework: true
  catalog_integration: true
  pattern_domain: error_handling
  output:
    format: markdown
    filename: "{{pattern_name}}-error-pattern.md"
    title: "{{pattern_name}} Error Handling Pattern Documentation"

constitutional_requirements:
  mode_detection: required
  catalog_read: mandatory
  context_preservation: enforced
  quality_validation: continuous
  anti_pattern_detection: enabled

workflow:
  mode: constitutional_interactive
  elicitation: guided_extraction
  catalog_validation: enabled
  constraint_enforcement: progressive

sections:
  - id: constitutional-initialization
    title: Constitutional Framework Initialization
    instruction: |
      Establish constitutional context for error handling pattern documentation:
      1. Identify development mode and error handling quality requirements
      2. Load constitutional framework for error governance
      3. Configure catalog integration validation requirements
      4. Establish context preservation for error pattern handoffs
      5. Set quality gates appropriate for error pattern tier
    sections:
      - id: pattern-context
        title: Error Pattern Context and Constitutional Framework
        template: |
          **Documentation Date:** {{documentation_date}}
          **Development Mode:** {{development_mode}}
          **Constitutional Framework:** {{constitutional_version}}
          **Pattern Agent:** sead-pattern-extraction
          **Error Quality Tier:** {{pattern_quality_tier}}
          **Catalog Domain:** Error Handling > {{error_subdomain}}
          **Constitutional Compliance:** {{constitutional_compliance_level}}

  - id: error-pattern-overview
    title: Error Handling Pattern Overview
    instruction: |
      Provide comprehensive error handling pattern overview focusing on system resilience and error management:
      1. Define error pattern purpose and error management problem it solves
      2. Establish error scope, boundaries, and failure handling responsibilities
      3. Document when to use this error pattern and when NOT to use
      4. Identify target systems and error handling prerequisites
      5. Provide value proposition and system resilience benefits
    elicit: true
    constitutional_validation: required
    sections:
      - id: error-pattern-summary
        title: Error Pattern Summary
        template: |
          **Error Pattern Name:** {{pattern_name}}
          **Error Domain:** {{error_subdomain}}
          **Quality Tier:** {{quality_tier}}
          **Error Complexity Level:** {{complexity_level}}
          **Resilience Scope:** {{resilience_scope}}
          
          **Error Purpose:**
          {{error_purpose}}
          
          **Error Management Problem Solved:**
          {{error_problem_description}}
          
          **Key Error Handling Benefits:**
          {{#each error_benefits}}
          - {{benefit_description}}
          {{/each}}

      - id: error-usage-guidance
        title: Error Usage Guidance
        template: |
          **When to Use This Error Pattern:**
          {{#each error_use_cases}}
          - {{use_case_description}}
          {{/each}}
          
          **When NOT to Use This Error Pattern:**
          {{#each error_anti_use_cases}}
          - {{anti_use_case_description}}
          {{/each}}
          
          **Error Handling Prerequisites:**
          {{#each error_prerequisites}}
          - {{prerequisite_description}}
          {{/each}}
          
          **Target Systems and Criticality:**
          - **System Types:** {{target_system_types}}
          - **Error Criticality:** {{error_criticality_level}}
          - **Recovery Requirements:** {{recovery_requirements}}

  - id: error-classification-detection
    title: Error Classification and Detection
    instruction: |
      Document comprehensive error classification and detection strategies:
      1. Define error categories and severity levels
      2. Document error detection patterns and early warning systems
      3. Specify error context capture and diagnostic information
      4. Include error propagation and containment strategies
      5. Address error correlation and root cause analysis
    elicit: true
    constitutional_validation: critical
    sections:
      - id: error-classification
        title: Error Classification and Severity
        template: |
          **Error Classification Framework:** {{error_classification_framework}}
          
          **Error Categories:**
          {{#each error_categories}}
          - **{{category_name}}:** {{category_description}}
            - **Severity Level:** {{severity_level}}
            - **Recovery Strategy:** {{recovery_strategy}}
            - **User Impact:** {{user_impact}}
          {{/each}}
          
          **Error Severity Matrix:**
          ```
          {{error_severity_matrix}}
          ```

      - id: error-detection-patterns
        title: Error Detection and Early Warning
        template: |
          **Detection Strategy:** {{detection_strategy}}
          
          **Error Detection Implementation:**
          ```{{programming_language}}
          {{error_detection_example}}
          ```
          
          **Early Warning Indicators:**
          {{#each warning_indicators}}
          - **{{indicator_name}}:** {{indicator_description}}
            - **Threshold:** {{indicator_threshold}}
            - **Action:** {{indicator_action}}
          {{/each}}
          
          **Health Check Pattern:**
          ```{{programming_language}}
          {{health_check_example}}
          ```

      - id: error-context-capture
        title: Error Context and Diagnostic Capture
        template: |
          **Context Capture Strategy:** {{context_capture_strategy}}
          
          **Error Context Structure:**
          ```{{programming_language}}
          {{error_context_structure}}
          ```
          
          **Diagnostic Information Collection:**
          ```{{programming_language}}
          {{diagnostic_collection_example}}
          ```
          
          **Stack Trace Enhancement:**
          ```{{programming_language}}
          {{stack_trace_enhancement_example}}
          ```

      - id: error-propagation-containment
        title: Error Propagation and Containment
        template: |
          **Propagation Strategy:** {{propagation_strategy}}
          
          **Error Boundary Implementation:**
          ```{{programming_language}}
          {{error_boundary_example}}
          ```
          
          **Error Containment Patterns:**
          ```{{programming_language}}
          {{error_containment_example}}
          ```
          
          **Failure Isolation:**
          ```{{programming_language}}
          {{failure_isolation_example}}
          ```

  - id: error-recovery-resilience
    title: Error Recovery and System Resilience
    instruction: |
      Document comprehensive error recovery and system resilience strategies:
      1. Define recovery patterns and fallback mechanisms
      2. Document retry strategies and circuit breaker patterns
      3. Include graceful degradation and service continuity
      4. Address automatic recovery and manual intervention
      5. Include disaster recovery and system restoration
    elicit: true
    constitutional_validation: critical
    sections:
      - id: recovery-patterns
        title: Recovery Patterns and Fallback Mechanisms
        template: |
          **Recovery Strategy:** {{recovery_strategy}}
          
          **Basic Recovery Pattern:**
          ```{{programming_language}}
          {{basic_recovery_example}}
          ```
          
          **Fallback Implementation:**
          ```{{programming_language}}
          {{fallback_implementation_example}}
          ```
          
          **Graceful Degradation:**
          ```{{programming_language}}
          {{graceful_degradation_example}}
          ```

      - id: retry-circuit-breaker
        title: Retry Strategies and Circuit Breaker Patterns
        template: |
          **Retry Strategy:** {{retry_strategy}}
          
          **Exponential Backoff Implementation:**
          ```{{programming_language}}
          {{exponential_backoff_example}}
          ```
          
          **Circuit Breaker Pattern:**
          ```{{programming_language}}
          {{circuit_breaker_example}}
          ```
          
          **Retry with Jitter:**
          ```{{programming_language}}
          {{retry_jitter_example}}
          ```

      - id: service-continuity
        title: Service Continuity and Disaster Recovery
        template: |
          **Continuity Strategy:** {{continuity_strategy}}
          
          **Service Failover:**
          ```{{programming_language}}
          {{service_failover_example}}
          ```
          
          **Data Recovery Patterns:**
          ```{{programming_language}}
          {{data_recovery_example}}
          ```
          
          **System Restoration Process:**
          {{#each restoration_steps}}
          {{step_number}}. {{step_description}}
          {{/each}}

  - id: error-communication-ux
    title: Error Communication and User Experience
    instruction: |
      Document comprehensive error communication and user experience strategies:
      1. Define user-friendly error messaging and communication patterns
      2. Document error state UI and visual feedback approaches
      3. Include accessibility considerations for error states
      4. Address error prevention and validation patterns
      5. Include user guidance and recovery assistance
    elicit: true
    constitutional_validation: required
    sections:
      - id: user-error-messaging
        title: User-Friendly Error Messaging
        template: |
          **Messaging Strategy:** {{messaging_strategy}}
          
          **Error Message Template:**
          ```{{template_language}}
          {{error_message_template}}
          ```
          
          **Message Localization:**
          ```{{programming_language}}
          {{message_localization_example}}
          ```
          
          **Severity-Based Messaging:**
          {{#each severity_messages}}
          - **{{severity_level}}:** {{message_pattern}}
          {{/each}}

      - id: error-state-ui
        title: Error State UI and Visual Feedback
        template: |
          **UI Error Strategy:** {{ui_error_strategy}}
          
          **Error State Components:**
          ```{{component_language}}
          {{error_state_component_example}}
          ```
          
          **Loading and Error States:**
          ```{{component_language}}
          {{loading_error_states_example}}
          ```
          
          **Inline Error Display:**
          ```{{component_language}}
          {{inline_error_display_example}}
          ```

      - id: error-prevention-validation
        title: Error Prevention and Validation
        template: |
          **Prevention Strategy:** {{prevention_strategy}}
          
          **Input Validation:**
          ```{{programming_language}}
          {{input_validation_example}}
          ```
          
          **Client-Side Validation:**
          ```{{client_language}}
          {{client_validation_example}}
          ```
          
          **Real-time Feedback:**
          ```{{component_language}}
          {{realtime_feedback_example}}
          ```

      - id: user-guidance-recovery
        title: User Guidance and Recovery Assistance
        template: |
          **Guidance Strategy:** {{guidance_strategy}}
          
          **Recovery Suggestions:**
          ```{{template_language}}
          {{recovery_suggestions_template}}
          ```
          
          **Progressive Error Help:**
          ```{{component_language}}
          {{progressive_error_help_example}}
          ```
          
          **Self-Service Recovery:**
          ```{{component_language}}
          {{self_service_recovery_example}}
          ```

  - id: error-logging-monitoring
    title: Error Logging and Monitoring
    instruction: |
      Document comprehensive error logging and monitoring strategies:
      1. Define error logging patterns and structured logging approaches
      2. Document error metrics and monitoring dashboards
      3. Include alerting strategies and escalation procedures
      4. Address error analytics and trend analysis
      5. Include compliance and audit trail requirements
    elicit: true
    constitutional_validation: required
    sections:
      - id: error-logging-patterns
        title: Error Logging Patterns
        template: |
          **Logging Strategy:** {{logging_strategy}}
          
          **Structured Error Logging:**
          ```{{programming_language}}
          {{structured_logging_example}}
          ```
          
          **Log Levels and Categories:**
          {{#each log_levels}}
          - **{{level_name}}:** {{level_description}}
            - **Use Cases:** {{level_use_cases}}
            - **Retention:** {{level_retention}}
          {{/each}}
          
          **Correlation ID Pattern:**
          ```{{programming_language}}
          {{correlation_id_example}}
          ```

      - id: error-monitoring-metrics
        title: Error Monitoring and Metrics
        template: |
          **Monitoring Strategy:** {{monitoring_strategy}}
          
          **Key Error Metrics:**
          {{#each error_metrics}}
          - **{{metric_name}}:** {{metric_description}}
            - **Calculation:** {{metric_calculation}}
            - **Threshold:** {{metric_threshold}}
          {{/each}}
          
          **Dashboard Configuration:**
          ```{{config_language}}
          {{dashboard_config_example}}
          ```

      - id: alerting-escalation
        title: Alerting and Escalation
        template: |
          **Alerting Strategy:** {{alerting_strategy}}
          
          **Alert Configuration:**
          ```{{config_language}}
          {{alert_config_example}}
          ```
          
          **Escalation Matrix:**
          {{#each escalation_levels}}
          - **Level {{level_number}}:** {{level_description}}
            - **Trigger:** {{level_trigger}}
            - **Response Time:** {{level_response_time}}
            - **Contacts:** {{level_contacts}}
          {{/each}}

      - id: error-analytics
        title: Error Analytics and Trend Analysis
        template: |
          **Analytics Strategy:** {{analytics_strategy}}
          
          **Error Trend Analysis:**
          ```{{analytics_language}}
          {{trend_analysis_example}}
          ```
          
          **Root Cause Analysis:**
          ```{{analytics_language}}
          {{root_cause_analysis_example}}
          ```
          
          **Pattern Recognition:**
          ```{{analytics_language}}
          {{pattern_recognition_example}}
          ```

  - id: error-testing-validation
    title: Error Testing and Validation
    instruction: |
      Document comprehensive error testing and validation approaches:
      1. Define error testing strategies and fault injection
      2. Provide chaos engineering and resilience testing examples
      3. Include error scenario testing and edge case validation
      4. Address error handling performance and load testing
      5. Include error recovery testing and disaster simulation
    elicit: true
    constitutional_validation: required
    sections:
      - id: error-testing-strategy
        title: Error Testing Strategy
        template: |
          **Testing Framework:** {{error_testing_framework}}
          **Testing Approach:** {{error_testing_approach}}
          
          **Test Categories:**
          {{#each error_test_categories}}
          - **{{category_name}}:** {{category_description}}
            - **Coverage:** {{category_coverage}}
            - **Tools:** {{category_tools}}
          {{/each}}

      - id: fault-injection-chaos
        title: Fault Injection and Chaos Engineering
        template: |
          **Chaos Engineering Strategy:** {{chaos_strategy}}
          
          **Fault Injection Example:**
          ```{{test_language}}
          {{fault_injection_example}}
          ```
          
          **Network Failure Simulation:**
          ```{{test_language}}
          {{network_failure_simulation}}
          ```
          
          **Resource Exhaustion Testing:**
          ```{{test_language}}
          {{resource_exhaustion_test}}
          ```

      - id: recovery-disaster-testing
        title: Recovery and Disaster Testing
        template: |
          **Recovery Testing Strategy:** {{recovery_testing_strategy}}
          
          **Recovery Time Testing:**
          ```{{test_language}}
          {{recovery_time_test_example}}
          ```
          
          **Disaster Simulation:**
          ```{{test_language}}
          {{disaster_simulation_example}}
          ```
          
          **Failover Testing:**
          ```{{test_language}}
          {{failover_test_example}}
          ```

  - id: constitutional-compliance
    title: Constitutional Framework Compliance
    instruction: |
      Document SEAD constitutional framework compliance for error handling patterns:
      1. Detail constitutional requirements for error handling design and governance
      2. Document mode-aware behavior for different development phases
      3. Provide context preservation capabilities for error pattern handoffs
      4. Address audit trail and governance requirements for error handling evolution
      5. Include compliance validation and monitoring for error patterns
    constitutional_validation: mandatory
    sections:
      - id: constitutional-integration
        title: Constitutional Framework Integration
        template: |
          **Framework Compliance:**
          - **Framework Version:** {{constitutional_framework_version}}
          - **Error Compliance Level:** {{error_compliance_level}}
          - **Integration Date:** {{integration_date}}
          - **Validation Status:** {{validation_status}}
          
          **Mode-Aware Error Behavior:**
          - **Prototype Mode:** {{prototype_mode_error_behavior}}
          - **Development Mode:** {{development_mode_error_behavior}}
          - **Build-to-Deploy Mode:** {{build_deploy_mode_error_behavior}}
          
          **Error Constraint Enforcement:**
          {{#each error_constraints}}
          - **{{constraint_name}}:** {{constraint_description}}
            - **Enforcement Level:** {{enforcement_level}}
            - **Validation:** {{validation_approach}}
          {{/each}}

      - id: error-context-preservation
        title: Context Preservation and Agent Handoffs
        template: |
          **Error Context Preservation:**
          - **Error State Serialization:** {{error_state_serialization_approach}}
          - **Context Metadata:** {{error_context_metadata_description}}
          - **Handoff Support:** {{error_handoff_support_level}}
          
          **Error Agent Handoff Requirements:**
          {{#each error_handoff_requirements}}
          - {{requirement_description}}
          {{/each}}
          
          **Error Context Validation:**
          ```{{validation_language}}
          {{error_context_validation_code}}
          ```

      - id: error-governance-integration
        title: Governance and Audit Integration
        template: |
          **Error Governance Framework:**
          - **Governance Level:** {{error_governance_level}}
          - **Approval Process:** {{error_approval_process}}
          - **Review Requirements:** {{error_review_requirements}}
          
          **Error Audit Trail:**
          - **Audit Events:** {{error_audit_events}}
          - **Log Format:** {{error_audit_log_format}}
          - **Retention Policy:** {{error_audit_retention_policy}}
          
          **Error Compliance Monitoring:**
          {{#each error_monitoring_mechanisms}}
          - **{{mechanism_name}}:** {{mechanism_description}}
          {{/each}}