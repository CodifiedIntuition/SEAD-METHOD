# SEAD Testing Pattern Documentation Template
template:
  id: test-pattern-template-v1
  name: SEAD Testing Pattern Documentation Template
  version: 1.0
  constitutional_framework: true
  catalog_integration: true
  pattern_domain: testing_strategies
  output:
    format: markdown
    filename: "{{pattern_name}}-test-pattern.md"
    title: "{{pattern_name}} Testing Pattern Documentation"

constitutional_requirements:
  mode_detection: required
  catalog_read: mandatory
  context_preservation: enforced
  quality_validation: continuous
  anti_pattern_detection: enabled

workflow:
  mode: constitutional_interactive
  elicitation: guided_extraction
  catalog_validation: enabled
  constraint_enforcement: progressive

sections:
  - id: constitutional-initialization
    title: Constitutional Framework Initialization
    instruction: |
      Establish constitutional context for testing pattern documentation:
      1. Identify development mode and testing quality requirements
      2. Load constitutional framework for testing governance
      3. Configure catalog integration validation requirements
      4. Establish context preservation for testing pattern handoffs
      5. Set quality gates appropriate for testing pattern tier
    sections:
      - id: pattern-context
        title: Testing Pattern Context and Constitutional Framework
        template: |
          **Documentation Date:** {{documentation_date}}
          **Development Mode:** {{development_mode}}
          **Constitutional Framework:** {{constitutional_version}}
          **Pattern Agent:** sead-pattern-extraction
          **Testing Quality Tier:** {{pattern_quality_tier}}
          **Catalog Domain:** Testing Strategies > {{testing_subdomain}}
          **Constitutional Compliance:** {{constitutional_compliance_level}}

  - id: testing-pattern-overview
    title: Testing Pattern Overview
    instruction: |
      Provide comprehensive testing pattern overview focusing on quality assurance and validation strategies:
      1. Define testing pattern purpose and quality assurance problem it solves
      2. Establish testing scope, boundaries, and validation responsibilities
      3. Document when to use this testing pattern and when NOT to use
      4. Identify target systems and testing prerequisites
      5. Provide value proposition and quality assurance benefits
    elicit: true
    constitutional_validation: required
    sections:
      - id: testing-pattern-summary
        title: Testing Pattern Summary
        template: |
          **Testing Pattern Name:** {{pattern_name}}
          **Testing Domain:** {{testing_subdomain}}
          **Quality Tier:** {{quality_tier}}
          **Testing Complexity Level:** {{complexity_level}}
          **Validation Scope:** {{validation_scope}}
          
          **Testing Purpose:**
          {{testing_purpose}}
          
          **Quality Assurance Problem Solved:**
          {{quality_problem_description}}
          
          **Key Testing Benefits:**
          {{#each testing_benefits}}
          - {{benefit_description}}
          {{/each}}

      - id: testing-usage-guidance
        title: Testing Usage Guidance
        template: |
          **When to Use This Testing Pattern:**
          {{#each testing_use_cases}}
          - {{use_case_description}}
          {{/each}}
          
          **When NOT to Use This Testing Pattern:**
          {{#each testing_anti_use_cases}}
          - {{anti_use_case_description}}
          {{/each}}
          
          **Testing Prerequisites:**
          {{#each testing_prerequisites}}
          - {{prerequisite_description}}
          {{/each}}
          
          **Target Systems and Coverage:**
          - **System Types:** {{target_system_types}}
          - **Test Coverage Goal:** {{test_coverage_goal}}
          - **Quality Requirements:** {{quality_requirements}}

  - id: test-strategy-organization
    title: Test Strategy and Organization
    instruction: |
      Document comprehensive test strategy and organization approaches:
      1. Define test pyramid and testing levels strategy
      2. Document test categorization and priority frameworks
      3. Specify test execution and automation strategies
      4. Include test environment and data management
      5. Address test maintenance and evolution approaches
    elicit: true
    constitutional_validation: critical
    sections:
      - id: test-pyramid-levels
        title: Test Pyramid and Testing Levels
        template: |
          **Testing Framework:** {{testing_framework}}
          **Test Strategy:** {{test_strategy_approach}}
          
          **Test Pyramid Structure:**
          ```
          {{test_pyramid_diagram}}
          ```
          
          **Testing Levels:**
          {{#each testing_levels}}
          - **{{level_name}}:** {{level_description}}
            - **Coverage Target:** {{level_coverage_target}}
            - **Execution Time:** {{level_execution_time}}
            - **Tools:** {{level_tools}}
            - **Frequency:** {{level_frequency}}
          {{/each}}

      - id: test-categorization
        title: Test Categorization and Priority
        template: |
          **Categorization Framework:** {{categorization_framework}}
          
          **Test Categories:**
          {{#each test_categories}}
          - **{{category_name}}:** {{category_description}}
            - **Priority:** {{category_priority}}
            - **Coverage:** {{category_coverage}}
            - **Automation Level:** {{category_automation}}
          {{/each}}
          
          **Test Priority Matrix:**
          ```
          {{test_priority_matrix}}
          ```

      - id: test-execution-automation
        title: Test Execution and Automation Strategy
        template: |
          **Execution Strategy:** {{execution_strategy}}
          
          **Automation Framework Configuration:**
          ```{{config_language}}
          {{automation_config_example}}
          ```
          
          **Test Runner Configuration:**
          ```{{config_language}}
          {{test_runner_config}}
          ```
          
          **Parallel Execution:**
          ```{{test_language}}
          {{parallel_execution_example}}
          ```

      - id: test-environment-data
        title: Test Environment and Data Management
        template: |
          **Environment Strategy:** {{environment_strategy}}
          
          **Test Environment Setup:**
          ```{{script_language}}
          {{environment_setup_example}}
          ```
          
          **Test Data Management:**
          ```{{test_language}}
          {{test_data_management_example}}
          ```
          
          **Database Seeding and Cleanup:**
          ```{{script_language}}
          {{database_seeding_cleanup_example}}
          ```

  - id: test-implementation-patterns
    title: Test Implementation Patterns
    instruction: |
      Document comprehensive test implementation patterns and best practices:
      1. Define test structure and organization patterns
      2. Document assertion patterns and validation approaches
      3. Include mock and stub implementation strategies
      4. Address test isolation and dependency management
      5. Include test debugging and troubleshooting approaches
    elicit: true
    constitutional_validation: critical
    sections:
      - id: test-structure-organization
        title: Test Structure and Organization
        template: |
          **Test Organization Pattern:** {{test_organization_pattern}}
          
          **Test File Structure:**
          ```
          {{test_file_structure}}
          ```
          
          **Test Suite Organization:**
          ```{{test_language}}
          {{test_suite_example}}
          ```
          
          **Test Naming Convention:**
          ```{{test_language}}
          {{test_naming_example}}
          ```

      - id: assertion-validation-patterns
        title: Assertion and Validation Patterns
        template: |
          **Assertion Strategy:** {{assertion_strategy}}
          
          **Basic Assertions:**
          ```{{test_language}}
          {{basic_assertions_example}}
          ```
          
          **Custom Matchers:**
          ```{{test_language}}
          {{custom_matchers_example}}
          ```
          
          **Async Assertions:**
          ```{{test_language}}
          {{async_assertions_example}}
          ```

      - id: mock-stub-patterns
        title: Mock and Stub Implementation
        template: |
          **Mocking Strategy:** {{mocking_strategy}}
          
          **Service Mocking:**
          ```{{test_language}}
          {{service_mocking_example}}
          ```
          
          **API Mocking:**
          ```{{test_language}}
          {{api_mocking_example}}
          ```
          
          **Database Mocking:**
          ```{{test_language}}
          {{database_mocking_example}}
          ```

      - id: test-isolation-dependencies
        title: Test Isolation and Dependency Management
        template: |
          **Isolation Strategy:** {{isolation_strategy}}
          
          **Test Isolation Implementation:**
          ```{{test_language}}
          {{test_isolation_example}}
          ```
          
          **Dependency Injection in Tests:**
          ```{{test_language}}
          {{dependency_injection_test_example}}
          ```
          
          **Test Cleanup Patterns:**
          ```{{test_language}}
          {{test_cleanup_example}}
          ```

  - id: test-types-coverage
    title: Test Types and Coverage Analysis
    instruction: |
      Document comprehensive test types and coverage analysis approaches:
      1. Define unit testing patterns and component isolation
      2. Document integration testing strategies and system interaction
      3. Include end-to-end testing and user journey validation
      4. Address performance and load testing approaches
      5. Include security and accessibility testing considerations
    elicit: true
    constitutional_validation: required
    sections:
      - id: unit-testing-patterns
        title: Unit Testing Patterns
        template: |
          **Unit Testing Strategy:** {{unit_testing_strategy}}
          
          **Component Unit Test:**
          ```{{test_language}}
          {{component_unit_test_example}}
          ```
          
          **Service Unit Test:**
          ```{{test_language}}
          {{service_unit_test_example}}
          ```
          
          **Utility Function Test:**
          ```{{test_language}}
          {{utility_function_test_example}}
          ```

      - id: integration-testing
        title: Integration Testing Strategies
        template: |
          **Integration Testing Approach:** {{integration_testing_approach}}
          
          **API Integration Test:**
          ```{{test_language}}
          {{api_integration_test_example}}
          ```
          
          **Database Integration Test:**
          ```{{test_language}}
          {{database_integration_test_example}}
          ```
          
          **Service Integration Test:**
          ```{{test_language}}
          {{service_integration_test_example}}
          ```

      - id: e2e-performance-testing
        title: End-to-End and Performance Testing
        template: |
          **E2E Testing Strategy:** {{e2e_testing_strategy}}
          
          **User Journey Test:**
          ```{{e2e_test_language}}
          {{user_journey_test_example}}
          ```
          
          **Performance Test:**
          ```{{performance_test_language}}
          {{performance_test_example}}
          ```
          
          **Load Testing Configuration:**
          ```{{config_language}}
          {{load_testing_config}}
          ```

      - id: security-accessibility-testing
        title: Security and Accessibility Testing
        template: |
          **Security Testing Strategy:** {{security_testing_strategy}}
          
          **Security Vulnerability Test:**
          ```{{test_language}}
          {{security_test_example}}
          ```
          
          **Accessibility Testing:**
          ```{{test_language}}
          {{accessibility_test_example}}
          ```
          
          **Cross-Browser Testing:**
          ```{{test_language}}
          {{cross_browser_test_example}}
          ```

  - id: test-data-fixtures
    title: Test Data and Fixtures Management
    instruction: |
      Document comprehensive test data and fixtures management strategies:
      1. Define test data generation and management patterns
      2. Document fixture creation and reusability approaches
      3. Include test database setup and cleanup strategies
      4. Address data anonymization and privacy considerations
      5. Include test data versioning and maintenance approaches
    elicit: true
    constitutional_validation: required
    sections:
      - id: test-data-generation
        title: Test Data Generation and Management
        template: |
          **Data Generation Strategy:** {{data_generation_strategy}}
          
          **Factory Pattern for Test Data:**
          ```{{test_language}}
          {{test_data_factory_example}}
          ```
          
          **Random Data Generation:**
          ```{{test_language}}
          {{random_data_generation_example}}
          ```
          
          **Realistic Data Fixtures:**
          ```{{test_language}}
          {{realistic_data_fixtures_example}}
          ```

      - id: fixture-management
        title: Fixture Creation and Reusability
        template: |
          **Fixture Strategy:** {{fixture_strategy}}
          
          **Shared Fixture Setup:**
          ```{{test_language}}
          {{shared_fixture_setup_example}}
          ```
          
          **Per-Test Fixtures:**
          ```{{test_language}}
          {{per_test_fixture_example}}
          ```
          
          **Fixture Composition:**
          ```{{test_language}}
          {{fixture_composition_example}}
          ```

      - id: test-database-management
        title: Test Database Setup and Management
        template: |
          **Database Strategy:** {{test_database_strategy}}
          
          **Test Database Setup:**
          ```{{script_language}}
          {{test_database_setup_example}}
          ```
          
          **Transaction Rollback Pattern:**
          ```{{test_language}}
          {{transaction_rollback_example}}
          ```
          
          **Database Migration Testing:**
          ```{{test_language}}
          {{migration_testing_example}}
          ```

  - id: test-ci-cd-integration
    title: Test CI/CD Integration and Automation
    instruction: |
      Document comprehensive test CI/CD integration and automation strategies:
      1. Define continuous testing pipeline configuration
      2. Document test automation and trigger strategies
      3. Include test reporting and feedback mechanisms
      4. Address test failure handling and retry strategies
      5. Include test metrics and quality gate integration
    elicit: true
    constitutional_validation: required
    sections:
      - id: ci-pipeline-integration
        title: CI/CD Pipeline Integration
        template: |
          **Pipeline Strategy:** {{pipeline_strategy}}
          
          **CI Configuration:**
          ```yaml
          {{ci_config_example}}
          ```
          
          **Test Stage Configuration:**
          ```yaml
          {{test_stage_config}}
          ```
          
          **Parallel Test Execution:**
          ```yaml
          {{parallel_test_execution_config}}
          ```

      - id: test-automation-triggers
        title: Test Automation and Triggers
        template: |
          **Automation Strategy:** {{automation_strategy}}
          
          **Automated Test Triggers:**
          {{#each test_triggers}}
          - **{{trigger_name}}:** {{trigger_description}}
            - **Condition:** {{trigger_condition}}
            - **Test Suite:** {{trigger_test_suite}}
          {{/each}}
          
          **Scheduled Test Execution:**
          ```{{config_language}}
          {{scheduled_test_config}}
          ```

      - id: test-reporting-feedback
        title: Test Reporting and Feedback
        template: |
          **Reporting Strategy:** {{reporting_strategy}}
          
          **Test Report Generation:**
          ```{{config_language}}
          {{test_report_config}}
          ```
          
          **Coverage Report:**
          ```{{script_language}}
          {{coverage_report_example}}
          ```
          
          **Failure Notification:**
          ```{{config_language}}
          {{failure_notification_config}}
          ```

      - id: quality-gates-metrics
        title: Quality Gates and Test Metrics
        template: |
          **Quality Gate Strategy:** {{quality_gate_strategy}}
          
          **Coverage Thresholds:**
          ```{{config_language}}
          {{coverage_thresholds_config}}
          ```
          
          **Test Metrics Collection:**
          ```{{script_language}}
          {{test_metrics_collection}}
          ```
          
          **Quality Gate Implementation:**
          ```{{config_language}}
          {{quality_gate_config}}
          ```

  - id: constitutional-compliance
    title: Constitutional Framework Compliance
    instruction: |
      Document SEAD constitutional framework compliance for testing patterns:
      1. Detail constitutional requirements for testing design and governance
      2. Document mode-aware behavior for different development phases
      3. Provide context preservation capabilities for testing pattern handoffs
      4. Address audit trail and governance requirements for testing evolution
      5. Include compliance validation and monitoring for testing patterns
    constitutional_validation: mandatory
    sections:
      - id: constitutional-integration
        title: Constitutional Framework Integration
        template: |
          **Framework Compliance:**
          - **Framework Version:** {{constitutional_framework_version}}
          - **Testing Compliance Level:** {{testing_compliance_level}}
          - **Integration Date:** {{integration_date}}
          - **Validation Status:** {{validation_status}}
          
          **Mode-Aware Testing Behavior:**
          - **Prototype Mode:** {{prototype_mode_testing_behavior}}
          - **Development Mode:** {{development_mode_testing_behavior}}
          - **Build-to-Deploy Mode:** {{build_deploy_mode_testing_behavior}}
          
          **Testing Constraint Enforcement:**
          {{#each testing_constraints}}
          - **{{constraint_name}}:** {{constraint_description}}
            - **Enforcement Level:** {{enforcement_level}}
            - **Validation:** {{validation_approach}}
          {{/each}}

      - id: testing-context-preservation
        title: Context Preservation and Agent Handoffs
        template: |
          **Testing Context Preservation:**
          - **Test State Serialization:** {{testing_state_serialization_approach}}
          - **Context Metadata:** {{testing_context_metadata_description}}
          - **Handoff Support:** {{testing_handoff_support_level}}
          
          **Testing Agent Handoff Requirements:**
          {{#each testing_handoff_requirements}}
          - {{requirement_description}}
          {{/each}}
          
          **Testing Context Validation:**
          ```{{validation_language}}
          {{testing_context_validation_code}}
          ```

      - id: testing-governance-integration
        title: Governance and Audit Integration
        template: |
          **Testing Governance Framework:**
          - **Governance Level:** {{testing_governance_level}}
          - **Approval Process:** {{testing_approval_process}}
          - **Review Requirements:** {{testing_review_requirements}}
          
          **Testing Audit Trail:**
          - **Audit Events:** {{testing_audit_events}}
          - **Log Format:** {{testing_audit_log_format}}
          - **Retention Policy:** {{testing_audit_retention_policy}}
          
          **Testing Compliance Monitoring:**
          {{#each testing_monitoring_mechanisms}}
          - **{{mechanism_name}}:** {{mechanism_description}}
          {{/each}}