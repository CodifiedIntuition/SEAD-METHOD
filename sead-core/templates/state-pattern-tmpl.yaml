# SEAD State Management Pattern Documentation Template
template:
  id: state-pattern-template-v1
  name: SEAD State Management Pattern Documentation Template
  version: 1.0
  constitutional_framework: true
  catalog_integration: true
  pattern_domain: state_management
  output:
    format: markdown
    filename: "{{pattern_name}}-state-pattern.md"
    title: "{{pattern_name}} State Management Pattern Documentation"

constitutional_requirements:
  mode_detection: required
  catalog_read: mandatory
  context_preservation: enforced
  quality_validation: continuous
  anti_pattern_detection: enabled

workflow:
  mode: constitutional_interactive
  elicitation: guided_extraction
  catalog_validation: enabled
  constraint_enforcement: progressive

sections:
  - id: constitutional-initialization
    title: Constitutional Framework Initialization
    instruction: |
      Establish constitutional context for state management pattern documentation:
      1. Identify development mode and state management quality requirements
      2. Load constitutional framework for state governance
      3. Configure catalog integration validation requirements
      4. Establish context preservation for state pattern handoffs
      5. Set quality gates appropriate for state pattern tier
    sections:
      - id: pattern-context
        title: State Pattern Context and Constitutional Framework
        template: |
          **Documentation Date:** {{documentation_date}}
          **Development Mode:** {{development_mode}}
          **Constitutional Framework:** {{constitutional_version}}
          **Pattern Agent:** sead-pattern-extraction
          **State Quality Tier:** {{pattern_quality_tier}}
          **Catalog Domain:** State Management > {{state_subdomain}}
          **Constitutional Compliance:** {{constitutional_compliance_level}}

  - id: state-pattern-overview
    title: State Management Pattern Overview
    instruction: |
      Provide comprehensive state management pattern overview focusing on data flow and application state:
      1. Define state pattern purpose and data flow problem it solves
      2. Establish state scope, boundaries, and data responsibilities
      3. Document when to use this state pattern and when NOT to use
      4. Identify target components and state integration prerequisites
      5. Provide value proposition and data flow benefits
    elicit: true
    constitutional_validation: required
    sections:
      - id: state-pattern-summary
        title: State Pattern Summary
        template: |
          **State Pattern Name:** {{pattern_name}}
          **State Domain:** {{state_subdomain}}
          **Quality Tier:** {{quality_tier}}
          **State Complexity Level:** {{complexity_level}}
          **Data Flow Scope:** {{data_flow_scope}}
          
          **State Purpose:**
          {{state_purpose}}
          
          **Data Flow Problem Solved:**
          {{data_flow_problem_description}}
          
          **Key State Management Benefits:**
          {{#each state_benefits}}
          - {{benefit_description}}
          {{/each}}

      - id: state-usage-guidance
        title: State Usage Guidance
        template: |
          **When to Use This State Pattern:**
          {{#each state_use_cases}}
          - {{use_case_description}}
          {{/each}}
          
          **When NOT to Use This State Pattern:**
          {{#each state_anti_use_cases}}
          - {{anti_use_case_description}}
          {{/each}}
          
          **State Integration Prerequisites:**
          {{#each state_prerequisites}}
          - {{prerequisite_description}}
          {{/each}}
          
          **Target Components and Scope:**
          - **Component Types:** {{target_component_types}}
          - **State Scope:** {{state_scope_description}}
          - **Data Flow Complexity:** {{data_flow_complexity_required}}

  - id: state-architecture-design
    title: State Architecture and Data Flow Design
    instruction: |
      Document comprehensive state architecture and data flow design:
      1. Define state structure, data models, and relationships
      2. Document action patterns and state mutation strategies
      3. Specify data flow patterns and update propagation
      4. Include side effect management and async operations
      5. Address state persistence and synchronization approaches
    elicit: true
    constitutional_validation: critical
    sections:
      - id: state-structure
        title: State Structure and Data Models
        template: |
          **State Management Library:** {{state_library}}
          **Data Modeling Approach:** {{data_modeling_approach}}
          
          **State Schema:**
          ```{{type_language}}
          {{state_schema_example}}
          ```
          
          **Initial State:**
          ```{{state_language}}
          {{initial_state_example}}
          ```
          
          **State Relationships:**
          {{#each state_relationships}}
          - **{{relationship_name}}:** {{relationship_description}}
            - **Type:** {{relationship_type}}
            - **Dependency:** {{relationship_dependency}}
          {{/each}}

      - id: action-patterns
        title: Action Patterns and State Mutations
        template: |
          **Action Pattern:** {{action_pattern_type}}
          
          **Action Types:**
          ```{{type_language}}
          {{action_types_example}}
          ```
          
          **Action Creators:**
          ```{{state_language}}
          {{action_creators_example}}
          ```
          
          **Reducer/Mutation Logic:**
          ```{{state_language}}
          {{reducer_mutation_example}}
          ```
          
          **Immutability Strategy:**
          {{immutability_strategy_description}}

      - id: data-flow-patterns
        title: Data Flow and Update Propagation
        template: |
          **Data Flow Architecture:** {{data_flow_architecture}}
          
          **Update Propagation Pattern:**
          ```{{state_language}}
          {{update_propagation_example}}
          ```
          
          **Component Subscription:**
          ```{{component_language}}
          {{component_subscription_example}}
          ```
          
          **Derived State:**
          ```{{state_language}}
          {{derived_state_example}}
          ```

      - id: side-effect-management
        title: Side Effect Management and Async Operations
        template: |
          **Side Effect Strategy:** {{side_effect_strategy}}
          
          **Async Action Handling:**
          ```{{state_language}}
          {{async_action_example}}
          ```
          
          **Loading State Management:**
          ```{{state_language}}
          {{loading_state_example}}
          ```
          
          **Error Handling in State:**
          ```{{state_language}}
          {{error_handling_example}}
          ```

  - id: state-implementation
    title: State Implementation Guide
    instruction: |
      Provide comprehensive state implementation guidance with working examples:
      1. Document step-by-step state setup and configuration
      2. Provide complete working state management examples
      3. Include component integration and consumption patterns
      4. Address testing approaches and state validation
      5. Include performance optimization techniques
    elicit: true
    constitutional_validation: critical
    sections:
      - id: state-setup-configuration
        title: State Setup and Configuration
        template: |
          **State Library Setup:**
          ```{{state_language}}
          {{state_setup_example}}
          ```
          
          **Store Configuration:**
          ```{{state_language}}
          {{store_config_example}}
          ```
          
          **Middleware/Plugin Configuration:**
          ```{{state_language}}
          {{middleware_config_example}}
          ```
          
          **DevTools Integration:**
          ```{{state_language}}
          {{devtools_integration_example}}
          ```

      - id: component-integration
        title: Component Integration and Consumption
        template: |
          **Component Connection Pattern:**
          ```{{component_language}}
          {{component_connection_example}}
          ```
          
          **Hook-Based Consumption:**
          ```{{component_language}}
          {{hook_consumption_example}}
          ```
          
          **HOC/Render Props Pattern:**
          ```{{component_language}}
          {{hoc_render_props_example}}
          ```
          
          **State Update from Components:**
          ```{{component_language}}
          {{state_update_from_component_example}}
          ```

      - id: advanced-patterns
        title: Advanced State Patterns
        template: |
          **Normalized State:**
          ```{{state_language}}
          {{normalized_state_example}}
          ```
          
          **State Machines:**
          ```{{state_language}}
          {{state_machine_example}}
          ```
          
          **Optimistic Updates:**
          ```{{state_language}}
          {{optimistic_updates_example}}
          ```
          
          **Undo/Redo Pattern:**
          ```{{state_language}}
          {{undo_redo_example}}
          ```

  - id: state-synchronization
    title: State Synchronization and Persistence
    instruction: |
      Document state synchronization and persistence strategies:
      1. Define local storage and session storage integration
      2. Document server state synchronization patterns
      3. Include real-time state synchronization approaches
      4. Address offline state and conflict resolution
      5. Include cross-tab/window state synchronization
    elicit: true
    constitutional_validation: required
    sections:
      - id: local-persistence
        title: Local Storage and Persistence
        template: |
          **Persistence Strategy:** {{persistence_strategy}}
          
          **Local Storage Integration:**
          ```{{state_language}}
          {{local_storage_integration_example}}
          ```
          
          **State Hydration:**
          ```{{state_language}}
          {{state_hydration_example}}
          ```
          
          **Serialization/Deserialization:**
          ```{{state_language}}
          {{serialization_example}}
          ```

      - id: server-synchronization
        title: Server State Synchronization
        template: |
          **Server Sync Strategy:** {{server_sync_strategy}}
          
          **API Integration:**
          ```{{state_language}}
          {{api_integration_example}}
          ```
          
          **Cache Management:**
          ```{{state_language}}
          {{cache_management_example}}
          ```
          
          **Conflict Resolution:**
          ```{{state_language}}
          {{conflict_resolution_example}}
          ```

      - id: realtime-synchronization
        title: Real-time State Synchronization
        template: |
          **Real-time Strategy:** {{realtime_strategy}}
          
          **WebSocket Integration:**
          ```{{state_language}}
          {{websocket_integration_example}}
          ```
          
          **Live Updates:**
          ```{{state_language}}
          {{live_updates_example}}
          ```
          
          **Cross-Tab Communication:**
          ```{{state_language}}
          {{cross_tab_communication_example}}
          ```

  - id: state-testing-validation
    title: State Testing and Validation
    instruction: |
      Document comprehensive state testing and validation approaches:
      1. Define state testing strategies and test categories
      2. Provide unit testing examples for state logic
      3. Include integration testing with components
      4. Address async state testing and side effects
      5. Include performance testing for state operations
    elicit: true
    constitutional_validation: required
    sections:
      - id: state-testing-strategy
        title: State Testing Strategy
        template: |
          **Testing Framework:** {{testing_framework}}
          **Testing Approach:** {{testing_approach}}
          
          **Test Categories:**
          {{#each test_categories}}
          - **{{category_name}}:** {{category_description}}
            - **Coverage:** {{category_coverage}}
            - **Tools:** {{category_tools}}
          {{/each}}

      - id: unit-testing-state
        title: Unit Testing State Logic
        template: |
          **Action Testing:**
          ```{{test_language}}
          {{action_testing_example}}
          ```
          
          **Reducer/Mutation Testing:**
          ```{{test_language}}
          {{reducer_testing_example}}
          ```
          
          **Selector Testing:**
          ```{{test_language}}
          {{selector_testing_example}}
          ```

      - id: integration-async-testing
        title: Integration and Async State Testing
        template: |
          **Component Integration Testing:**
          ```{{test_language}}
          {{component_integration_testing_example}}
          ```
          
          **Async State Testing:**
          ```{{test_language}}
          {{async_state_testing_example}}
          ```
          
          **Side Effect Testing:**
          ```{{test_language}}
          {{side_effect_testing_example}}
          ```

  - id: state-performance-optimization
    title: State Performance Optimization
    instruction: |
      Document state performance optimization techniques and best practices:
      1. Address state update performance and optimization strategies
      2. Include memory management and state cleanup approaches
      3. Document state normalization and data structure optimization
      4. Address subscription optimization and re-render prevention
      5. Include performance monitoring and measurement techniques
    elicit: true
    constitutional_validation: required
    sections:
      - id: update-performance
        title: State Update Performance
        template: |
          **Performance Characteristics:**
          - **Update Frequency:** {{typical_update_frequency}}
          - **State Size:** {{typical_state_size}}
          - **Memory Usage:** {{memory_usage}}
          
          **Optimization Techniques:**
          {{#each optimization_techniques}}
          - **{{technique_name}}:** {{technique_description}}
          ```{{state_language}}
          {{technique_example}}
          ```
          {{/each}}

      - id: subscription-optimization
        title: Subscription and Re-render Optimization
        template: |
          **Subscription Strategy:** {{subscription_strategy}}
          
          **Selective Subscription:**
          ```{{component_language}}
          {{selective_subscription_example}}
          ```
          
          **Memoization Pattern:**
          ```{{component_language}}
          {{memoization_example}}
          ```
          
          **Re-render Prevention:**
          ```{{component_language}}
          {{rerender_prevention_example}}
          ```

      - id: normalization-cleanup
        title: Data Normalization and Cleanup
        template: |
          **Normalization Strategy:**
          ```{{state_language}}
          {{normalization_example}}
          ```
          
          **State Cleanup:**
          ```{{state_language}}
          {{state_cleanup_example}}
          ```
          
          **Memory Leak Prevention:**
          ```{{state_language}}
          {{memory_leak_prevention_example}}
          ```

  - id: constitutional-compliance
    title: Constitutional Framework Compliance
    instruction: |
      Document SEAD constitutional framework compliance for state management patterns:
      1. Detail constitutional requirements for state design and governance
      2. Document mode-aware behavior for different development phases
      3. Provide context preservation capabilities for state pattern handoffs
      4. Address audit trail and governance requirements for state evolution
      5. Include compliance validation and monitoring for state patterns
    constitutional_validation: mandatory
    sections:
      - id: constitutional-integration
        title: Constitutional Framework Integration
        template: |
          **Framework Compliance:**
          - **Framework Version:** {{constitutional_framework_version}}
          - **State Compliance Level:** {{state_compliance_level}}
          - **Integration Date:** {{integration_date}}
          - **Validation Status:** {{validation_status}}
          
          **Mode-Aware State Behavior:**
          - **Prototype Mode:** {{prototype_mode_state_behavior}}
          - **Development Mode:** {{development_mode_state_behavior}}
          - **Build-to-Deploy Mode:** {{build_deploy_mode_state_behavior}}
          
          **State Constraint Enforcement:**
          {{#each state_constraints}}
          - **{{constraint_name}}:** {{constraint_description}}
            - **Enforcement Level:** {{enforcement_level}}
            - **Validation:** {{validation_approach}}
          {{/each}}

      - id: state-context-preservation
        title: Context Preservation and Agent Handoffs
        template: |
          **State Context Preservation:**
          - **State Serialization:** {{state_serialization_approach}}
          - **Context Metadata:** {{state_context_metadata_description}}
          - **Handoff Support:** {{state_handoff_support_level}}
          
          **State Agent Handoff Requirements:**
          {{#each state_handoff_requirements}}
          - {{requirement_description}}
          {{/each}}
          
          **State Context Validation:**
          ```{{validation_language}}
          {{state_context_validation_code}}
          ```

      - id: state-governance-integration
        title: Governance and Audit Integration
        template: |
          **State Governance Framework:**
          - **Governance Level:** {{state_governance_level}}
          - **Approval Process:** {{state_approval_process}}
          - **Review Requirements:** {{state_review_requirements}}
          
          **State Audit Trail:**
          - **Audit Events:** {{state_audit_events}}
          - **Log Format:** {{state_audit_log_format}}
          - **Retention Policy:** {{state_audit_retention_policy}}
          
          **State Compliance Monitoring:**
          {{#each state_monitoring_mechanisms}}
          - **{{mechanism_name}}:** {{mechanism_description}}
          {{/each}}