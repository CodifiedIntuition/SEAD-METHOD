# SEAD Architecture Template
template:
  id: sead-architecture-template-v1
  name: SEAD Architecture Document
  version: 1.0
  constitutional_framework: true
  catalog_integration: true
  output:
    format: markdown
    filename: docs/sead-architecture.md
    title: "{{project_name}} SEAD Architecture Document"

constitutional_requirements:
  mode_detection: required
  catalog_read: mandatory
  context_preservation: enforced
  governance_validation: continuous

workflow:
  mode: constitutional_interactive
  elicitation: sead-advanced-elicitation
  catalog_validation: enabled
  constraint_enforcement: progressive

sections:
  - id: constitutional-introduction
    title: Constitutional Framework Introduction
    instruction: |
      Before beginning architecture design, establish constitutional framework context:
      1. Identify current development mode (prototype/development/build-to-deploy)
      2. Read relevant catalog domains and existing patterns
      3. Review constitutional constraints applicable to current mode
      4. Document context preservation requirements for agent handoffs
    sections:
      - id: constitutional-context
        title: Constitutional Framework Context
        template: |
          **Development Mode:** {{development_mode}}
          **Catalog Domains Referenced:** {{catalog_domains}}
          **Constitutional Constraints:** {{mode_constraints}}
          **Context Preservation:** {{context_requirements}}
          **Governance Validation:** {{validation_level}}
      - id: catalog-integration-summary
        title: Catalog Integration Summary
        template: |
          This SEAD architecture document integrates with the following catalog domains:
          - **API Contracts:** {{api_contracts_integration}}
          - **Shared Types:** {{shared_types_integration}}
          - **Design System:** {{design_system_integration}}
          - **State Management:** {{state_management_integration}}
          - **Error Handling:** {{error_handling_integration}}
          - **Auth Patterns:** {{auth_patterns_integration}}
          
          **Catalog Compliance Level:** {{compliance_level}} (based on {{development_mode}} mode)

  - id: introduction
    title: Introduction
    instruction: |
      Review available documents and catalog context before beginning. Must include:
      1. Existing PRD and project documentation
      2. Relevant catalog patterns and constraints
      3. Constitutional framework requirements
      4. Mode-specific architectural constraints
    sections:
      - id: intro-content
        content: |
          This document outlines the catalog-compliant, constitutionally-aligned architecture for {{project_name}}. It serves as the guiding blueprint for SEAD-aware development, ensuring consistency with catalog patterns, adherence to constitutional constraints, and proper context preservation across agent handoffs.

          **Constitutional Compliance:**
          - **Mode-Aware Design:** Architecture respects {{development_mode}} mode constraints
          - **Catalog Integration:** Leverages existing patterns and promotes catalog evolution
          - **Context Preservation:** Maintains references for seamless agent handoffs
          - **Governance Adherence:** Follows SEAD constitutional principles throughout

          **Relationship to Frontend Architecture:**
          If the project includes UI components, a separate SEAD Frontend Architecture Document will detail frontend-specific patterns using design-system catalog components and MUST be used in conjunction with this document. All architectural decisions herein are definitive and catalog-compliant.

      - id: catalog-starter-template
        title: Catalog-Aware Starter Template Analysis
        instruction: |
          Before proceeding with architecture design, analyze starter templates with catalog awareness:

          1. Review PRD and brainstorming brief for mentions of:
          - Catalog-compliant starter templates
          - Existing projects using similar catalog patterns
          - Boilerplate projects with SEAD methodology
          - Previous catalog-compliant implementations

          2. If a starter template is mentioned:
          - Analyze template's compatibility with catalog patterns
          - Assess constitutional compliance capabilities
          - Evaluate integration with existing catalog domains
          - Document any catalog pattern conflicts or gaps
          - Ensure template supports current development mode constraints

          3. If no catalog-compliant starter exists:
          - Suggest catalog-compatible alternatives
          - Propose modifications to make template catalog-compliant
          - Plan integration strategy with existing catalog patterns

          4. Document catalog integration decision and constitutional implications
        elicit: true
        constitutional_validation: required

      - id: changelog
        title: Change Log
        type: table
        columns: [Date, Version, Description, Constitutional Impact, Author]
        instruction: Track document versions with constitutional compliance notes

  - id: constitutional-high-level-architecture
    title: Constitutional High Level Architecture
    instruction: |
      Establish architecture foundation with catalog integration and constitutional compliance.
      All subsections must respect current mode constraints and catalog patterns.
    elicit: true
    catalog_validation: required
    sections:
      - id: constitutional-technical-summary
        title: Constitutional Technical Summary
        instruction: |
          Provide constitutional architecture overview including:
          - System architecture style within catalog constraints
          - Key components using catalog patterns
          - Technology choices respecting constitutional framework
          - Architectural patterns aligned with SEAD principles
          - PRD goal support through catalog-compliant design
      - id: catalog-aware-overview
        title: Catalog-Aware Architecture Overview
        instruction: |
          Based on PRD Technical Assumptions and catalog context, describe:

          1. Architectural style (considering catalog pattern support)
          2. Repository structure aligned with catalog organization
          3. Service architecture supporting catalog integration
          4. User interaction flow using catalog patterns
          5. Key architectural decisions with constitutional rationale
          6. Catalog pattern evolution opportunities identified
      - id: constitutional-project-diagram
        title: Constitutional Project Diagram
        type: mermaid
        mermaid_type: graph
        instruction: |
          Create Mermaid diagram visualizing constitutional architecture:
          - System boundaries with catalog domain integration
          - Major components using catalog patterns
          - Data flow respecting constitutional constraints
          - External integrations via catalog API patterns
          - User entry points through catalog-compliant interfaces
          - Constitutional governance touchpoints

      - id: catalog-architectural-patterns
        title: Catalog-Enhanced Architectural Patterns
        instruction: |
          Define patterns with catalog integration and constitutional compliance:

          1. Review existing catalog patterns for applicability
          2. Present 2-3 viable options including catalog-compliant approaches
          3. Recommend patterns supporting constitutional framework
          4. Validate user confirmation respects mode constraints
          5. Ensure patterns align with PRD goals and catalog evolution

          Constitutional pattern considerations:
          - Catalog-first architectural patterns (prioritize existing patterns)
          - Specification-driven patterns (align with constitutional framework)
          - Progressive constraint patterns (support mode transitions)
          - Context preservation patterns (maintain agent handoff continuity)
        template: "- **{{pattern_name}}:** {{pattern_description}} - _Catalog Integration:_ {{catalog_integration}} - _Constitutional Rationale:_ {{constitutional_rationale}}"
        examples:
          - "**Catalog-Compliant Serverless:** Using AWS Lambda with api-contracts patterns - _Catalog Integration:_ Leverages existing API contract definitions - _Constitutional Rationale:_ Supports progressive constraint enforcement"
          - "**Constitutional Repository Pattern:** Abstract data access with catalog data patterns - _Catalog Integration:_ Uses shared-types and data-strategy catalog - _Constitutional Rationale:_ Enables context preservation across agent handoffs"

  - id: constitutional-tech-stack
    title: Constitutional Tech Stack
    instruction: |
      DEFINITIVE technology selection with catalog compliance and constitutional framework:

      1. Review PRD technical assumptions and catalog technical-preferences
      2. Prioritize catalog-compatible technologies and patterns
      3. Present options respecting current development mode constraints
      4. Make constitutional recommendations based on governance principles
      5. Get explicit user approval ensuring catalog compliance
      6. Document exact versions with catalog integration notes
      7. Establish catalog pattern compatibility for all selections

      Constitutional selection criteria:
      - Catalog pattern support and integration capabilities
      - Constitutional framework compliance (mode-appropriate constraints)
      - Context preservation support for agent handoffs
      - Governance validation and enforcement capabilities

      CRITICAL: This section determines catalog compliance for entire project
    elicit: true
    constitutional_validation: critical
    sections:
      - id: catalog-cloud-infrastructure
        title: Catalog-Compliant Cloud Infrastructure
        template: |
          - **Provider:** {{cloud_provider}} (Catalog Validated: {{catalog_validation}})
          - **Key Services:** {{core_services_list}} (Catalog Integration: {{catalog_integration}})
          - **Deployment Regions:** {{regions}} (Constitutional Compliance: {{compliance_level}})
      - id: constitutional-technology-stack-table
        title: Constitutional Technology Stack Table
        type: table
        columns: [Category, Technology, Version, Purpose, Catalog Integration, Constitutional Rationale]
        instruction: Populate with catalog-compliant technologies and constitutional justification
        examples:
          - "| **Language** | TypeScript | 5.3.3 | Primary development language | shared-types catalog support | Strong typing supports constitutional validation |"
          - "| **Framework** | NestJS | 10.3.2 | Backend framework | api-contracts integration ready | Enterprise patterns align with governance framework |"

  - id: constitutional-data-models
    title: Constitutional Data Models
    instruction: |
      Define data models with catalog integration and constitutional compliance:

      1. Review PRD requirements and existing shared-types catalog
      2. Identify key business entities using catalog type definitions
      3. Ensure models support constitutional constraint validation
      4. Design relationships respecting catalog data-strategy patterns
      5. Include catalog evolution considerations for new types
      6. Validate constitutional compliance for current development mode

      Create conceptual models that extend catalog patterns before moving to schema.
    elicit: true
    catalog_integration: required
    repeatable: true
    sections:
      - id: catalog-model
        title: "{{model_name}} (Catalog Integration)"
        template: |
          **Purpose:** {{model_purpose}}
          **Catalog Domain:** {{catalog_domain}} ({{catalog_pattern_reference}})
          **Constitutional Constraints:** {{constitutional_constraints}}

          **Key Attributes (Catalog-Enhanced):**
          - {{attribute_1}}: {{type_1}} ({{catalog_type_reference}}) - {{description_1}}
          - {{attribute_2}}: {{type_2}} ({{catalog_type_reference}}) - {{description_2}}

          **Catalog Relationships:**
          - {{catalog_relationship_1}} (via {{catalog_pattern}})
          - {{catalog_relationship_2}} (via {{catalog_pattern}})

          **Constitutional Validation:**
          - {{validation_rule_1}} ({{mode_constraint}})
          - {{validation_rule_2}} ({{governance_principle}})

  - id: constitutional-components
    title: Constitutional Components
    instruction: |
      Define components with catalog pattern integration and constitutional compliance:

      1. Identify components using catalog patterns and governance principles
      2. Respect repository structure and constitutional constraints
      3. Define boundaries supporting catalog domain separation
      4. Specify catalog pattern usage and constitutional validation
      5. Ensure components support context preservation for agent handoffs
      6. Plan component evolution within catalog framework
    elicit: true
    constitutional_validation: required
    sections:
      - id: catalog-component-list
        repeatable: true
        title: "{{component_name}} (Catalog-Compliant)"
        template: |
          **Responsibility:** {{component_description}}
          **Catalog Patterns Used:** {{catalog_patterns}}
          **Constitutional Constraints:** {{constitutional_constraints}}

          **Key Interfaces (Catalog-Compliant):**
          - {{interface_1}} ({{catalog_api_pattern}})
          - {{interface_2}} ({{catalog_contract_reference}})

          **Catalog Dependencies:** {{catalog_dependencies}}
          **Constitutional Validation:** {{validation_requirements}}

          **Technology Stack (Catalog-Integrated):** {{component_tech_details}}
      - id: constitutional-component-diagrams
        title: Constitutional Component Diagrams
        type: mermaid
        instruction: |
          Create Mermaid diagrams showing constitutional component architecture:
          - C4 Container diagram with catalog domain boundaries
          - Component diagram showing catalog pattern integration
          - Sequence diagrams including constitutional validation points
          - Context preservation flow across component interactions

  - id: constitutional-external-apis
    title: Constitutional External APIs
    condition: Project requires external API integrations
    instruction: |
      Define external API integrations with catalog compliance:

      1. Identify APIs needed with catalog api-contracts pattern compliance
      2. Ensure integration methods respect constitutional framework
      3. Document authentication using catalog auth-patterns
      4. Plan integration supporting context preservation
      5. Validate security considerations within governance principles

      All external integrations must support catalog pattern integration.
    elicit: true
    catalog_validation: required
    repeatable: true
    sections:
      - id: catalog-api
        title: "{{api_name}} API (Catalog-Integrated)"
        template: |
          - **Purpose:** {{api_purpose}}
          - **Catalog Integration:** {{catalog_integration_method}}
          - **Constitutional Compliance:** {{constitutional_compliance}}
          - **Documentation:** {{api_docs_url}}
          - **Base URL(s):** {{api_base_url}}
          - **Authentication:** {{auth_method}} ({{catalog_auth_pattern}})
          - **Rate Limits:** {{rate_limits}}

          **Key Endpoints (Catalog-Mapped):**
          - `{{method}} {{endpoint_path}}` - {{endpoint_purpose}} ({{catalog_contract_reference}})

          **Constitutional Integration Notes:** {{constitutional_considerations}}

  - id: constitutional-core-workflows
    title: Constitutional Core Workflows
    type: mermaid
    mermaid_type: sequence
    instruction: |
      Illustrate workflows with constitutional compliance and catalog integration:

      1. Identify critical user journeys from PRD with catalog touchpoints
      2. Show component interactions using catalog patterns
      3. Include constitutional validation points and error handling
      4. Document async operations with context preservation
      5. Create diagrams showing agent handoff continuity

      Focus on workflows demonstrating constitutional architecture decisions.
    elicit: true
    constitutional_validation: required

  - id: constitutional-rest-api-spec
    title: Constitutional REST API Specification
    condition: Project includes REST API
    type: code
    language: yaml
    instruction: |
      Create OpenAPI specification with catalog compliance:

      1. Use catalog api-contracts patterns and existing specifications
      2. Include endpoints respecting constitutional constraints
      3. Define schemas using shared-types catalog definitions
      4. Document authentication using catalog auth-patterns
      5. Include constitutional validation requirements

      All API specifications must integrate with catalog patterns.
    elicit: true
    catalog_integration: mandatory
    template: |
      openapi: 3.0.0
      info:
        title: {{api_title}}
        version: {{api_version}}
        description: {{api_description}}
        x-catalog-integration: {{catalog_integration}}
        x-constitutional-compliance: {{constitutional_compliance}}
      servers:
        - url: {{server_url}}
          description: {{server_description}}
      components:
        schemas:
          # Reference catalog shared-types
          $ref: '../sead-catalog/shared-types/{{type_definitions}}.yaml'

  - id: constitutional-database-schema
    title: Constitutional Database Schema
    instruction: |
      Transform data models into catalog-compliant database schemas:

      1. Use database type from constitutional tech stack
      2. Integrate with catalog data-strategy patterns
      3. Include constitutional validation constraints
      4. Consider catalog performance patterns and scalability
      5. Support context preservation for data operations
      6. Plan schema evolution within catalog framework

      Present schema using catalog-approved formats and patterns.
    elicit: true
    catalog_validation: required

  - id: constitutional-source-tree
    title: Constitutional Source Tree
    type: code
    language: plaintext
    instruction: |
      Create project structure supporting constitutional framework:

      1. Reflect catalog domain organization and separation
      2. Support constitutional constraint validation
      3. Enable context preservation across agent handoffs
      4. Follow catalog best practices and conventions
      5. Organize components for governance compliance
      6. Include catalog integration points and references

      Structure must support SEAD methodology and catalog evolution.
    elicit: true
    constitutional_validation: required
    examples:
      - |
        sead-project-root/
        ├── sead-catalog/              # Local catalog extensions
        │   ├── api-contracts/         # Project-specific API contracts
        │   ├── shared-types/          # Project type definitions
        │   ├── design-system/         # UI component patterns
        │   └── integration-patterns/  # External service patterns
        ├── src/
        │   ├── api/                   # Backend service (catalog-compliant)
        │   ├── web/                   # Frontend application (design-system)
        │   ├── shared/                # Cross-domain utilities
        │   └── constitutional/        # Governance validation
        ├── docs/                      # SEAD documentation
        ├── .sead/                     # Constitutional configuration
        └── package.json               # Catalog-aware dependencies

  - id: constitutional-infrastructure-deployment
    title: Constitutional Infrastructure and Deployment
    instruction: |
      Define deployment with catalog compliance and constitutional governance:

      1. Use deployment-strategy catalog patterns
      2. Implement constitutional compliance validation in pipeline
      3. Support progressive constraint enforcement across environments
      4. Enable catalog pattern validation and governance monitoring
      5. Plan rollback procedures preserving constitutional integrity

      All deployment practices must support SEAD governance framework.
    elicit: true
    constitutional_validation: critical
    sections:
      - id: catalog-infrastructure-as-code
        title: Catalog-Compliant Infrastructure as Code
        template: |
          - **Tool:** {{iac_tool}} {{version}} (Catalog Validated: {{catalog_validation}})
          - **Location:** `{{iac_directory}}`
          - **Catalog Integration:** {{catalog_integration_method}}
          - **Constitutional Approach:** {{constitutional_compliance}}
      - id: constitutional-deployment-strategy
        title: Constitutional Deployment Strategy
        template: |
          - **Strategy:** {{deployment_strategy}} ({{constitutional_compliance}})
          - **CI/CD Platform:** {{cicd_platform}} ({{catalog_integration}})
          - **Pipeline Configuration:** `{{pipeline_config_location}}`
          - **Constitutional Validation:** {{validation_gates}}
      - id: constitutional-environments
        title: Constitutional Environments
        repeatable: true
        template: "- **{{env_name}}:** {{env_purpose}} - {{env_details}} ({{constitutional_constraints}})"

  - id: constitutional-error-handling-strategy
    title: Constitutional Error Handling Strategy
    instruction: |
      Define error handling with catalog patterns and constitutional compliance:

      1. Use error-handling catalog patterns
      2. Implement constitutional validation for error scenarios
      3. Support context preservation during error conditions
      4. Ensure logging standards respect governance principles
      5. Plan error recovery maintaining catalog compliance

      Error handling must support SEAD governance and catalog integration.
    elicit: true
    catalog_integration: required
    sections:
      - id: constitutional-general-approach
        title: Constitutional Error Handling Approach
        template: |
          - **Error Model:** {{error_model}} ({{catalog_pattern_reference}})
          - **Constitutional Validation:** {{validation_approach}}
          - **Context Preservation:** {{context_handling}}
          - **Exception Hierarchy:** {{exception_structure}}
      - id: catalog-logging-standards
        title: Catalog-Compliant Logging Standards
        template: |
          - **Library:** {{logging_library}} {{version}} ({{catalog_integration}})
          - **Format:** {{log_format}} ({{catalog_pattern}})
          - **Constitutional Requirements:**
            - Context Preservation: {{context_requirements}}
            - Governance Validation: {{validation_logging}}
            - Catalog Integration: {{integration_logging}}

  - id: constitutional-coding-standards
    title: Constitutional Coding Standards
    instruction: |
      Define MANDATORY standards for constitutional compliance and catalog integration:

      1. Standards directly control SEAD agent behavior
      2. Focus on catalog compliance and constitutional requirements
      3. Include context preservation and governance validation rules
      4. Define catalog pattern usage requirements
      5. Specify mode-appropriate constraint enforcement

      These standards are CRITICAL for SEAD methodology compliance.
    elicit: true
    constitutional_validation: mandatory
    sections:
      - id: constitutional-core-standards
        title: Constitutional Core Standards
        template: |
          - **SEAD Methodology:** {{sead_compliance_level}}
          - **Catalog Integration:** {{catalog_integration_requirements}}
          - **Constitutional Framework:** {{constitutional_compliance_level}}
          - **Context Preservation:** {{context_preservation_requirements}}
      - id: catalog-critical-rules
        title: Catalog and Constitutional Rules
        instruction: |
          List MANDATORY rules for catalog compliance and constitutional adherence:
          - "All API implementations MUST use api-contracts catalog patterns"
          - "Type definitions MUST reference shared-types catalog or provide evolution path"
          - "Context MUST be preserved across all agent handoffs using .sead/context.yaml"
          - "Constitutional constraints MUST be validated before deployment"
        repeatable: true
        template: "- **{{rule_name}}:** {{rule_description}} ({{catalog_domain}} / {{constitutional_principle}})"

  - id: constitutional-test-strategy
    title: Constitutional Test Strategy and Standards
    instruction: |
      Define testing with catalog compliance and constitutional validation:

      1. Use test-patterns catalog and constitutional testing framework
      2. Include catalog pattern validation tests
      3. Test constitutional compliance and governance adherence
      4. Validate context preservation across agent handoffs
      5. Plan catalog evolution testing and validation

      Testing must validate both functionality and constitutional compliance.
    elicit: true
    constitutional_validation: required
    sections:
      - id: constitutional-testing-philosophy
        title: Constitutional Testing Philosophy
        template: |
          - **Approach:** {{test_approach}} with constitutional validation
          - **Catalog Compliance:** {{catalog_testing_requirements}}
          - **Constitutional Validation:** {{constitutional_testing_approach}}
          - **Context Preservation Testing:** {{context_testing_strategy}}

  - id: constitutional-security
    title: Constitutional Security
    instruction: |
      Define security with catalog patterns and constitutional compliance:

      1. Use security-patterns catalog and constitutional security framework
      2. Implement auth-patterns catalog for authentication/authorization
      3. Include constitutional compliance monitoring and validation
      4. Support context preservation security throughout agent handoffs
      5. Plan security within governance principles and catalog constraints

      Security implementation must align with SEAD constitutional framework.
    elicit: true
    constitutional_validation: critical
    sections:
      - id: catalog-auth-authorization
        title: Catalog-Based Authentication & Authorization
        template: |
          - **Auth Method:** {{auth_implementation}} ({{catalog_auth_pattern}})
          - **Constitutional Compliance:** {{constitutional_auth_requirements}}
          - **Context Preservation:** {{auth_context_handling}}
          - **Catalog Integration:** {{auth_catalog_integration}}

  - id: constitutional-checklist-results
    title: Constitutional Checklist Results Report
    instruction: |
      Execute SEAD constitutional architecture checklist validating:
      - Catalog integration completeness and compliance
      - Constitutional framework adherence
      - Context preservation implementation
      - Governance validation and constraint enforcement
      
      Populate results ensuring full constitutional compliance before proceeding.
    constitutional_validation: mandatory

  - id: constitutional-next-steps
    title: Constitutional Next Steps
    instruction: |
      Define next steps with constitutional compliance and catalog integration:

      1. Frontend Architecture (if applicable) must use design-system catalog
      2. All subsequent agents must maintain constitutional compliance
      3. Context preservation must be validated across all handoffs
      4. Catalog evolution opportunities should be documented
      5. Governance validation must continue throughout development

      Provide specific prompts ensuring constitutional continuity.
    sections:
      - id: constitutional-architect-prompt
        title: Constitutional Architect Handoff Prompt
        condition: Project has UI components
        instruction: |
          Create handoff prompt for Frontend Architecture ensuring:
          - Reference to this constitutional architecture document
          - Design-system catalog compliance requirements
          - Constitutional framework continuation
          - Context preservation across architectural layers
          - Mode-appropriate constraint enforcement